// Code generated by go-bindata.
// sources:
// builtin_models/bvlc_alexnet.yml
// builtin_models/bvlc_googlenet.yml
// builtin_models/bvlc_reference_caffenet.yml
// builtin_models/bvlc_reference_rcnn_ilsvrc13.yml
// DO NOT EDIT!

package caffe

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bvlc_alexnetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x5d\x6f\xeb\x36\x0f\xbe\xf7\xaf\x20\x10\x1c\xa0\x7d\xdf\xd8\xf9\x68\xda\x65\xbe\x18\xb0\xf5\x6a\xc0\xd6\x8b\x61\x1b\x06\x0c\x43\x40\xcb\x74\xac\x53\x59\x12\x24\x2a\x6d\x6f\xf6\xdb\x07\x7d\x38\x49\x71\xba\x9d\x5e\xa4\xb2\xf8\x3c\xe4\x23\x8a\xa4\x34\x4e\xd4\xc2\x0f\xbf\xff\xf4\x58\x7f\xaf\xe8\xf5\x89\x18\x16\x10\x37\xc1\x0c\xf0\x66\x82\x83\xc9\xf4\xa4\xaa\xc1\xe1\x44\x2f\xc6\x3d\xb7\x15\x40\x26\xfd\xfc\x47\x46\x9f\x4d\x30\x18\x07\x3c\x52\xa1\x00\x9c\xc8\x79\x69\x74\x0b\x7f\x6f\x9a\xf5\x3b\x64\xb1\x80\x30\x9a\x1d\x4a\xcd\xd5\x19\x9b\xa1\x33\x40\xea\xc1\xb8\x09\x39\xaf\xc1\xd3\x84\x9a\xa5\x38\xdb\xb3\xb5\x8a\x7e\x50\x6a\x72\x2d\x2c\xe0\xfc\xe1\x21\x78\xea\x81\x0d\x58\x72\x11\x99\x95\x81\x75\xd4\x4b\x11\x7d\x56\x70\xf9\x5b\xc0\x14\x14\x4b\xab\x08\xac\x42\x8e\x78\x0f\x02\x35\x74\x04\xde\x92\x90\x83\xa4\xbe\x02\xc0\xa9\x7f\xd8\xb5\x89\x79\xb4\xa1\x05\x87\xd2\x3a\xf3\x99\x04\xaf\x04\xba\x49\xd5\x02\x87\x81\xda\x04\xab\x85\x0d\x09\x29\xbe\x8a\x3c\x26\xa4\xb5\xe2\x61\xa7\xa8\xfd\x2a\xa9\x00\x0b\xed\xbf\xa5\x5c\x63\x7b\xf2\xc2\x49\xcb\x29\xd7\xdf\x55\x00\xbf\x8e\x04\x5d\xd0\xbd\xa2\xbe\xa4\x47\xfa\x74\x8b\x92\xc9\xe5\xc4\xdf\x3d\xac\x97\xeb\xf5\x1a\xbc\x46\xeb\x47\xc3\x4d\x26\x91\x67\x38\xa1\x92\x3d\x96\x54\x96\x2c\xa3\x16\x04\x7d\x70\x52\x1f\x21\xdd\x6e\x5c\xbc\xa0\xbf\xf6\x78\xbf\x4f\x1e\x5f\x24\x8f\x57\x3e\x00\x85\x08\x0e\xc5\x5b\x05\x70\xff\x4d\xb3\xbd\xdf\x7f\x02\xd4\x3d\x28\xe3\x3d\x6c\x9a\xfd\xdd\xb7\xbb\x7d\x0c\x2e\x7d\x91\x6a\xba\x78\xd3\x1e\x10\xd8\xd8\x7a\x73\xe6\x47\xf6\x26\x73\xb1\x82\x64\xbc\xbf\x18\xf7\xeb\x66\xfb\x09\x8c\x4e\xc7\xbc\x8a\xee\x89\x97\x10\x7c\x94\xfb\x39\x78\x4e\x66\x41\x9a\xc9\x81\x70\xc6\x36\x15\xc0\xcd\x6f\xc9\x1c\x2d\x78\x22\x87\xc7\xd4\x28\x9b\x75\x02\xf8\x25\xdc\xec\xe0\xff\xb0\x29\xac\x5b\xf8\x1f\x6c\x61\x92\xce\x19\xb7\x04\x3f\x9a\xa0\xfa\x22\x39\xd6\x11\x74\x92\x61\x94\xc7\x91\xdc\x59\x5b\x73\x5b\x39\x1a\xc8\x91\x16\xe4\x63\x31\x5f\xbe\x52\x1d\xa3\x8d\x65\xbd\x82\x17\xea\xbc\x64\x8a\x4b\x62\xd1\x34\x90\xef\xb5\x9b\xc5\xcd\x2d\x58\xc3\xc8\x6c\xdb\xd5\x2a\x33\x1b\x2d\xad\x6f\x84\xc8\x9f\xab\xdd\x7e\xbb\xab\xe5\x84\x47\xd2\xc4\xb5\x50\xe8\xbd\x1c\xa4\x48\xd9\xa8\xe3\xdd\xd4\x3d\x91\xad\x85\xd1\x27\xa3\x42\xdc\x45\x55\x6b\x0a\x2e\xfd\xe3\xd8\xca\xbe\xb1\xfd\x50\x2d\x40\x49\x41\xda\xa7\x6c\x5c\xe2\x97\xcd\x16\x82\x76\xe4\xd9\x49\xc1\xd4\x57\x0b\x90\xda\x06\x4e\x07\xba\x60\xf3\x5e\x2c\xfc\x05\x0c\xd2\x79\xce\x28\xe0\x37\x4b\x5f\x4c\x96\x3a\x6d\xb7\x90\xb4\x57\xb9\x7b\xaf\x2a\x7b\x56\x71\xe5\x27\x81\xde\x15\x7f\xaa\xf1\x14\xe2\xe2\xc5\x62\x1c\x51\x4c\x2e\xe5\x3e\x85\xbe\x6c\x95\x61\xd1\xcb\x89\x74\x1c\x3e\xbe\x85\x3f\x37\x4b\xb8\x5b\xc2\x76\xbb\x4b\x3f\x7f\x55\x26\xb0\x0d\x9c\x4f\x11\x03\x24\x17\x45\x4d\xb6\xc5\x72\x4c\xda\x07\x42\x0e\x8e\x12\x14\x3f\x52\x9f\xf1\x17\x01\xd5\x07\x07\x28\x18\x85\x5d\xca\xcb\x95\xfe\x92\x95\x8f\xce\x50\x22\xfb\x43\x70\xaa\x9d\x0b\xa4\x47\xc6\xa6\x9f\x94\x68\x26\xb5\x9a\x5e\x35\xf1\x2a\x65\xdb\xaf\xe6\x02\x59\xf9\x37\xed\x89\x1b\x7e\xe5\x2a\x99\x62\x8e\xe6\xc9\x38\x77\xe4\xd1\xa1\x1d\x53\xe3\xbd\x90\x3c\x8e\xec\xc1\x91\x37\xc1\x09\x8a\xb1\x3b\xf4\xf4\x3e\xaa\x6a\xd2\x8c\x6a\x3a\x72\xcf\xa4\xe8\xed\x24\x63\x6a\x1b\xe3\x8e\x15\x64\x67\x07\x8b\x3c\xb6\xd0\x9d\x94\x38\xa0\xa2\xa8\x2c\x73\xe6\x62\x90\xfe\x80\x4e\x8c\xf2\x14\x93\x8a\xca\x13\x2c\x40\x0e\xb9\x9b\x79\xa4\xdc\xe6\x73\xe4\x38\xdd\x10\xe2\x82\x0d\xa0\x86\xc2\xbc\x7e\x08\xae\x5e\x84\xc8\xbc\x88\xb8\x3e\x56\xde\x48\xee\x7b\xd2\x86\x29\xae\xff\xc5\xcb\x20\x15\xa5\x47\xd3\xcf\x57\xfb\x65\x96\x62\xb7\xc9\x2c\x75\x96\x84\xcc\x4e\x76\x81\xf3\x20\xa0\x57\x76\x08\xa5\xeb\xe0\x62\xab\x00\x9e\xa5\xee\x5b\x78\x7c\x7a\x2a\x8a\xe3\x77\x8c\x94\x3b\xf5\xcc\xb9\x79\x7c\x7a\x5a\xc2\x2f\xf1\xa7\x69\x9a\xdb\x58\x88\x65\x3a\x1f\xe2\xe5\x7b\xe2\x16\x7e\x8c\x77\x9d\xdf\xf5\xb2\x77\x7e\x43\x53\x0f\x16\x42\x05\x30\xa1\x96\x03\x79\x3e\x60\xe0\xd1\xb8\x16\xb0\xeb\x83\xea\xab\x7f\x02\x00\x00\xff\xff\x4a\xcb\x84\x93\x52\x08\x00\x00"

func bvlc_alexnetYmlBytes() ([]byte, error) {
	return bindataRead(
		_bvlc_alexnetYml,
		"bvlc_alexnet.yml",
	)
}

func bvlc_alexnetYml() (*asset, error) {
	bytes, err := bvlc_alexnetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bvlc_alexnet.yml", size: 2130, mode: os.FileMode(420), modTime: time.Unix(1501524019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bvlc_googlenetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x3c\xc0\x97\x16\x48\xa4\x24\x35\x16\xad\x0e\x3d\xd4\x05\x16\x0b\x04\x39\xec\x02\x7b\x29\x0a\x63\x44\x8e\x64\x36\x14\x49\x90\x23\x27\xee\xa1\xbf\xbd\x20\x25\x5b\x0e\x36\xed\xfa\x20\x90\x33\x6f\x66\x1e\xe7\xcb\x8e\x46\x6e\xf1\xdb\xd7\xc7\xdd\xed\x47\xef\x87\x47\x7e\x62\xc1\x06\x59\x0c\xdf\xe3\xe4\xa7\x88\xd1\x6b\xb6\x55\x1f\x69\xe4\x17\x1f\x9f\xdb\x0a\x98\xcd\x76\xd4\xf7\x8c\x0d\x2e\x2a\xf4\x3e\x42\x0e\xbc\x98\x00\x47\x8e\xc9\x78\xd7\xe2\x9f\xfb\xfa\xee\x0d\x72\xd1\x40\x79\x27\x91\x8c\x93\xea\x82\x9d\xa1\x67\x80\x71\xbd\x8f\x23\xc9\x7c\x46\xe2\x91\x9c\x18\x75\xd1\xcf\xda\x2a\xfb\x21\xe3\x38\xb6\xd8\xe0\x72\x49\x98\x12\x6b\x88\x47\xe0\x98\x91\x33\x33\x84\xc8\xda\xa8\xec\xb3\xc2\xfa\xdb\x60\x9c\xac\x98\x60\x19\xc1\x92\x64\x7c\x82\x22\x87\x8e\x91\x02\x2b\xd3\x1b\xd6\x15\x40\xa3\xfe\xb0\x6d\x8b\xe5\x10\xa6\x16\x91\x4c\x88\xfe\x2f\x56\xd2\x28\x8a\xa3\xbd\x55\x39\x31\x6d\x81\xdd\xaa\x30\x15\xa4\xfa\x2e\x72\x28\xc8\x10\xd4\x87\xad\xe5\xf6\xbb\x46\x0b\x70\x31\xfb\x7f\x2a\xd7\x58\xcd\x49\x45\x13\xa4\xe4\xfa\xd7\x0a\x58\x0b\x5f\x2a\xc1\x1a\xde\xe1\xd3\xe3\x97\xaf\x9f\x77\x78\xb8\xbb\x7f\xb8\x01\xd9\xd1\x27\x01\xbf\x92\x12\x7b\x02\x25\xcc\x4e\x3a\xd6\xb9\x26\x1f\xbd\x71\x03\x7e\x67\x0e\x1c\xf1\x62\xe4\x80\x9d\x77\x47\x6f\xa7\x1c\x23\xa1\x3b\xe1\xcb\xdf\x3c\xb0\x3e\x81\x05\x64\xeb\x6c\xb3\xfa\xdf\xd6\x55\xe4\x9e\x23\x3b\xc5\x29\x57\x6f\xbd\x95\xc2\x51\xc8\x75\x6c\xf0\xc2\x5d\x32\xc2\xf9\xc8\xa2\xea\xfa\xcc\x21\xc7\xbe\xee\xb9\x5b\x1c\x44\x42\x6a\x9b\x86\xe2\xab\x39\xd6\x3e\x0e\x4d\xd0\x7d\x73\xbf\xbd\xfb\xa5\xde\xfe\xbc\x7d\xa8\x83\xee\xab\x0d\xac\x51\xec\x52\x69\xf3\xd5\x7c\x11\xb6\x98\x5c\xe4\x24\xd1\x28\x61\x5d\x6d\x60\x5c\x98\xa4\xf0\x59\xb1\xb3\x2c\x17\x6a\x83\xde\xc4\x24\x33\x0a\x72\x0a\xfc\xcd\x24\xdc\x16\x71\x0b\x33\xd2\xc0\xd5\xdc\x6d\x57\x95\x38\xb3\xb8\xf2\x53\x40\x6f\x8a\x95\x01\x73\x88\xd5\x4b\xa0\x3c\x52\xc2\xb1\xa4\xae\x84\x5e\x45\x4b\x73\x6b\x33\xb2\xcb\xc3\x92\x5a\xfc\x71\x7f\x83\x9f\x6e\xf0\xf0\xb0\x2d\x9f\x3f\x2b\x3f\x49\x98\x64\x7e\x45\x0e\x50\x5c\x2c\x6c\x66\x5d\x85\x85\x7b\xcf\x24\x53\xe4\x02\xa5\xf7\xd8\xcf\xf8\x95\x40\xf5\xce\x03\x16\x8c\xa5\xae\xe4\xe5\x8a\xff\x92\x95\xf7\xde\xb0\x44\x4e\xfb\x29\xda\xb6\xd4\xb7\x6d\x1a\x4d\x42\xb5\x1e\xad\xaa\x47\xdb\x8c\xaf\x8e\xa5\x29\xd9\x4e\x4d\x49\x4f\xbe\xa7\x93\x4b\x2c\xb5\xbc\x4a\x55\x54\x39\x47\xe7\x49\x4e\xcb\x2e\x18\x22\x85\x03\xc8\x69\xbc\xb0\x19\x0e\x92\x10\x39\xf9\x29\x2a\xce\xb1\x3b\x4a\xfc\x36\xaa\xad\xcb\x4c\xd5\x1d\xc7\x67\xb6\x7c\x3a\x9a\x9c\xda\xdc\x66\x15\x66\x67\xfb\x40\x72\x68\xd1\x1d\xad\xda\x0f\xde\x0f\x36\x73\x99\xad\xce\xed\x60\xd2\x9e\xa2\x3a\x98\x63\x4e\x2b\xd9\x94\xd7\xa8\xe9\x91\x58\x6e\x72\x96\x5c\x49\xd5\x39\x36\x4c\x02\x21\x1f\xc4\x83\x1c\x16\xcb\xeb\xd5\x75\xb5\xc3\xb2\xe5\x4a\xe3\xfa\x61\xb3\xa0\xb8\xd7\xec\xbc\x70\x3e\xff\x87\x97\xde\x58\x2e\x6b\x3e\x9d\x8b\xfb\x6d\x9e\xf2\xa8\x9b\x99\xea\x99\x12\x89\x44\xd3\x4d\x32\x4f\x32\xbf\x4a\x24\x38\x96\xb2\xf2\x57\x5d\x05\x3c\x1b\xa7\x5b\xec\x9e\x9e\x16\xc6\xf9\x9e\x23\x39\x9e\x22\xd9\x8b\xcd\x0f\xbb\xa7\xa7\x1b\x7c\xce\x9f\xba\xae\x7f\xcc\xad\x98\x77\x94\x71\xc3\x3e\x97\x3f\xb1\xb4\xf8\x94\xab\x3d\xff\x6f\x2d\xb2\xcb\xd6\x2f\x53\xb8\x18\x54\xc0\x48\xce\xf4\x9c\x64\x4f\x93\x1c\x7c\x6c\x41\x9d\x9e\xac\xae\xfe\x0d\x00\x00\xff\xff\x46\xd5\xef\xfe\x06\x07\x00\x00"

func bvlc_googlenetYmlBytes() ([]byte, error) {
	return bindataRead(
		_bvlc_googlenetYml,
		"bvlc_googlenet.yml",
	)
}

func bvlc_googlenetYml() (*asset, error) {
	bytes, err := bvlc_googlenetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bvlc_googlenet.yml", size: 1798, mode: os.FileMode(420), modTime: time.Unix(1501524019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bvlc_reference_caffenetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x3c\xc0\x97\x16\x88\xe4\x4d\x1a\x2c\x0a\x1d\x0a\x14\x39\x05\x2d\x8c\x22\x0b\xf4\x52\x14\x06\x45\x8d\x6c\x36\x14\x49\x90\x23\x27\xee\xa1\xbf\xbd\x18\x52\xb2\x6c\x6c\xda\xcd\xc1\x21\x39\x6f\x66\xde\x7c\xca\xa9\x91\x5a\xbc\xd0\x40\x91\x9c\x26\x3c\xa9\x61\xa0\x1d\x31\x36\x10\x11\xfc\x80\xb3\x9f\x22\x46\xdf\x93\xad\x86\xa8\x46\x7a\xf3\xf1\xb5\xad\x80\xa2\x9a\x15\xb0\xc1\x45\x84\xc1\x47\xf0\x91\x66\x15\xe0\x44\x31\x19\xef\x5a\xfc\x73\xdf\x7c\xba\x41\xce\x12\x68\xef\x38\x2a\xe3\xb8\xba\x60\x0b\x74\x01\x18\x37\xf8\x38\x2a\x2e\x67\x24\x1a\x95\x63\xa3\x2f\xf2\x22\xad\xc4\x8e\x32\x8e\x62\x8b\x0d\x2e\x97\x84\x29\x51\x0f\xf6\x08\x14\x05\x59\x98\x21\x44\xea\x8d\x16\x9b\x15\xd6\xbf\x0d\xc6\xc9\xb2\x09\x96\x10\xac\x62\xc1\x27\x68\xe5\xd0\x11\x52\x20\x6d\x06\x43\x7d\x05\xa8\xb1\xff\xfc\xd8\x66\xcd\x43\x98\x5a\x44\x65\x42\xf4\x7f\x91\xe6\xad\x56\x71\xb4\xb5\x96\xc4\xb4\x19\x56\xeb\x30\x65\xa4\xfe\x26\xf2\x90\x91\x21\xe8\xcf\x8f\x96\xda\x6f\x2a\xcd\xc0\x59\xed\xff\xa9\x5c\x63\x7b\x4a\x3a\x9a\xc0\x39\xd7\x3f\x55\xc0\xcf\x96\xde\xa5\xec\xb9\x0e\xd4\xc3\x3b\x3c\xff\xfa\xe5\xf7\x97\x27\x3c\x7c\xba\x7f\xb8\xc3\x9b\xe1\x23\x14\x46\xe3\x7c\xc4\x49\x45\x53\x8a\x31\x44\x3f\xe6\x62\x2f\x95\x50\x09\xc5\x76\x47\xbd\x94\xea\x79\x54\x87\xdc\x4f\xda\xaa\x94\xcc\x60\x74\x51\xcc\xf6\x7a\xa2\x20\x75\x3a\x79\x3b\xc9\xab\xb2\x70\x34\xc5\xfc\x8f\xa5\x43\x12\xba\x33\x7e\x89\xe6\xef\x23\x9d\xd2\xeb\x19\xc4\x50\xb6\x11\xbb\xbb\xe7\xdf\xbe\x64\x6a\x0d\xaa\xb8\x74\x6f\x92\xba\xaf\xb7\x5c\x72\x15\xa4\x03\xb6\x78\xa3\x2e\x19\x26\x39\x12\xeb\xa6\x59\x68\x1a\x77\xb8\xe9\xd6\x1a\x47\xe6\xd0\x6e\xb7\x45\xb3\x71\x26\xa4\x46\xeb\x72\xdd\x3e\xfe\xf8\xf0\x58\x1b\x89\xc9\x11\xd7\xb7\x31\xd5\x12\x53\x2d\x31\xd5\x37\x31\xd5\x25\xa6\x7a\x89\xa9\x09\xfd\x50\x6d\x60\x8d\x26\x97\xf2\x84\xad\xfe\xe7\xc7\x16\x93\x8b\x94\x38\x1a\xcd\xd4\x57\x1b\x18\x17\x26\xce\x01\xad\xd8\xf2\x26\x3d\xb2\xc1\x60\x62\xe2\x82\x02\x9f\x03\x7d\x35\x84\x75\x7e\x6e\x91\xb9\x57\xa5\xd1\xaf\x9a\x60\x61\x71\x65\x27\x83\x6e\xfa\x44\x00\xc5\xc5\x6a\x25\x28\x99\x66\xa6\x98\x73\x9f\x5d\xaf\x4f\xf3\x5c\xf5\x66\x24\x27\xdd\x91\x5a\xfc\x71\x7f\x87\x1f\xee\xf0\xf0\xf0\x98\x7f\xfe\xac\xfc\xc4\x61\xe2\x12\x85\x38\xc8\x26\x66\x36\x45\x56\x61\xe6\x3e\x90\xe2\x29\x52\x86\xaa\x8f\xd8\x17\xfc\x4a\xa0\xfa\x20\x80\x19\x63\x55\x97\xf3\x72\xc5\x7f\xce\xca\x47\x31\xcc\x9e\xd3\x7e\x8a\xb6\x5d\x1a\xa4\x57\xac\x9a\x7e\xb4\xba\x19\xed\x76\x7c\x77\xc4\xdb\x9c\xed\xb4\x5d\x1a\x64\x9b\xce\x2e\x11\x37\xfc\xce\x55\x16\x49\x8e\x96\x25\x92\xe6\x35\x74\x88\x2a\x1c\xa1\x5c\x8f\x37\x32\x87\x23\x27\x44\x4a\x7e\x8a\x9a\xc4\x77\xa7\x12\xdd\x7a\xb5\x4d\x1e\xe7\xa6\xa3\xf8\x4a\x96\xce\x27\x23\xa9\x6d\x7c\x3c\x54\x28\xc6\xf6\x41\xf1\xb1\x45\x77\xb2\x7a\x7f\x99\x86\x7d\xd6\x72\xc4\x45\x7d\xe9\x0b\x93\xf6\x2a\xea\xa3\x39\x49\x7e\x95\x4d\xb2\xca\xcd\x80\x44\x7c\x27\xe9\x72\x39\x67\x0b\x09\x98\x04\x05\x39\xb0\x87\x72\x98\x35\xaf\xd7\xe7\xd5\x1e\x15\xcd\x95\xcf\x75\x84\xe5\x21\x9b\xef\xc9\x79\x26\x39\xff\x87\x95\xc1\x58\xca\x9f\x9a\xb4\x54\xf9\xeb\x84\xc9\xe0\x99\x42\x75\xa1\xa4\x98\xa3\xe9\x26\x2e\x3b\x81\xde\x39\xaa\x65\xa9\x60\x95\x55\xc0\xab\x71\x7d\x8b\xa7\xdd\x6e\x66\x2c\x77\xf1\x74\xbb\x88\xf0\xdd\xd3\x6e\x77\x87\x17\xf9\x69\x9a\xe6\x7b\xe9\x49\xd9\x94\xc6\x1d\xf6\xd2\x07\x89\xb8\x5d\x77\xdd\x06\xf3\xdb\xe5\xcb\x93\xc7\x71\x56\xa8\x80\x51\x39\x33\x50\xe2\xbd\x9a\xf8\xe8\x63\x0b\xd5\xf5\x93\xed\xab\x7f\x03\x00\x00\xff\xff\x1c\xde\x4f\x1d\x8e\x07\x00\x00"

func bvlc_reference_caffenetYmlBytes() ([]byte, error) {
	return bindataRead(
		_bvlc_reference_caffenetYml,
		"bvlc_reference_caffenet.yml",
	)
}

func bvlc_reference_caffenetYml() (*asset, error) {
	bytes, err := bvlc_reference_caffenetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bvlc_reference_caffenet.yml", size: 1934, mode: os.FileMode(420), modTime: time.Unix(1501524019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bvlc_reference_rcnn_ilsvrc13Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x4b\x8f\xeb\x36\x0f\xdd\xfb\x57\x10\xc8\xe6\xfb\x80\x89\x3d\xc9\xa4\x77\xe1\x45\x37\x59\x14\x17\x28\x82\x22\x05\xee\xa6\x28\x02\x5a\xa2\x13\x76\x64\x59\xa0\xe8\xcc\x64\xd3\xdf\x5e\x48\x72\x1e\x83\x3b\xed\xcd\xc2\xd0\xe3\x90\x3c\x3a\x7c\xc4\xe3\x40\x2d\xec\xa9\x27\x21\x6f\x08\xf6\xcb\xed\x6e\x07\x5f\x7f\xfd\xfd\xdb\x7e\xbb\x5c\x3f\xaf\x5e\x60\x01\x09\x03\x63\x0f\x97\x71\x12\x18\x46\x4b\xae\xea\x05\x07\x7a\x1b\xe5\xb5\xad\x00\x8a\x8f\x2d\xf6\x3d\xc1\x02\x6e\x57\xd0\x8f\x02\x7a\xa2\xd9\x04\xe0\x4c\x12\x79\xf4\x2d\xfc\xbd\xaa\x9f\x3f\x20\xe7\x1b\x30\xa3\x57\x41\xf6\x5a\xdd\xb0\x05\x7a\x05\xb0\xef\x47\x19\x50\xcb\x1a\x22\x0d\xe8\x95\xcd\xed\xbe\xdc\x56\xc9\x0f\xb2\x27\x69\x61\x01\xb7\x4d\x84\x29\x92\x05\x1d\x21\x90\x24\x64\x61\x06\x41\xc8\xb2\x49\x3e\x2b\xb8\xff\x16\x30\x4c\x4e\x39\x38\x82\xe0\x50\x13\x3e\x82\x41\x0f\x1d\x41\x0c\x64\xb8\x67\xb2\x15\x00\x0e\xf6\xcb\xa6\xcd\x96\xc7\x30\xb5\x20\xc8\x41\xc6\xbf\xc8\x68\x63\x50\x06\xb7\x34\x49\x98\x36\xc3\x96\x26\x4c\x19\x69\x7e\x88\x3c\x66\x64\x08\xe6\xcb\xc6\x51\xfb\x43\xa3\x19\x38\x9b\xfd\x37\x95\x47\xac\xa5\x68\x84\x83\x66\xad\x7f\x4e\x11\x27\xa1\x39\x97\x3c\x04\x47\x03\x79\x2d\x7a\x8f\xfd\x5c\x1d\x18\xa1\x98\x75\x64\xa1\xbb\xc0\x2f\x2c\xf1\xc4\xe6\x15\x48\x01\x5d\x9d\x12\xb3\xfd\xf6\xdb\x1e\xd6\xcf\xab\x4d\x25\xd7\xd2\x8a\x29\x17\xf7\x5d\x4e\x03\x86\x94\x95\x06\xde\xa8\x8b\xac\x94\x96\xa4\xa6\xae\xaf\xfe\xd9\x1f\x3f\x54\xd0\x12\x4e\xaa\x21\xb6\x4d\x83\xf2\xce\xe7\x7a\x94\x63\x13\x6c\xdf\xac\x5e\x56\xab\x7a\xfd\xd3\x7a\x53\x07\xdb\x57\x0b\x70\x6c\xc8\xc7\x5c\xb4\x77\xf3\xf9\xb0\x85\xc9\x0b\x45\x15\x36\x4a\xb6\x5a\x00\xfb\x30\x69\xe6\x73\xc7\x96\xb3\x24\xfb\x02\x7a\x96\xa8\x05\x05\x7a\x09\xf4\x5d\x5d\x2f\xf3\x71\x0b\x3c\xe0\x91\xaa\x52\x3b\x0f\xba\x5e\x59\x3c\xf8\xc9\xa0\x0f\xd2\x27\x40\x09\x71\xf7\x12\x30\x35\x88\x92\x64\xe9\x72\xe8\xfb\xd1\x5c\xaa\x96\x07\xf2\xa9\xf4\x63\x0b\x7f\xac\x9e\xe0\xe5\x09\xd6\xeb\x4d\xfe\xfc\x59\x8d\x93\x86\x49\xcb\x2b\x52\x80\xec\x62\x66\x53\xee\x2a\x98\xb9\xf7\x84\x3a\x09\x65\x28\x7e\xc6\xbe\xe0\xef\x04\xaa\x4f\x1e\x30\x63\x1c\x76\x59\x97\x07\xfe\xb3\x2a\x9f\xbd\x61\x8e\x1c\x0f\x93\xb8\x36\xe7\xb7\x6d\x1a\x8b\x8a\xb5\x1d\x9c\xa9\x07\xd7\x0c\xef\x9e\xb4\xc9\x6a\xc7\x26\xcb\x93\xf6\xf1\xe2\x23\x69\xad\xef\x5a\xe5\xab\xa4\xd1\xb5\x2f\xe3\xdc\xd9\x47\xc1\x70\x02\xf4\x16\xde\x88\x8f\x27\x8d\x20\x14\xc7\x49\x0c\xa5\xd8\x1d\x46\xfa\x18\xd5\xd5\xb9\x43\xea\x8e\xe4\x95\x1c\x5d\xce\x9c\xa4\x4d\x65\x56\x41\x71\x76\x08\xa8\xa7\x16\xba\xb3\x33\x87\x5b\x31\x1f\xc4\x78\x7f\x60\x17\xcf\x62\x56\x2f\xc5\xc7\xb5\x38\x38\x1e\x50\xcc\x89\xcf\x49\x64\x74\x31\x8d\x48\xee\x21\x92\x3e\x25\xcd\x7c\x16\xee\xca\x04\x38\x02\x42\x5a\xe8\x08\xe8\x61\xb6\x7c\x1c\x4b\x0f\xf3\x29\x59\xde\x49\x3d\x3e\xb3\x1c\x64\xf7\x96\xfc\xa8\x94\xd6\xff\xe2\xa5\x67\x47\x79\x84\xc7\x6b\xaa\xbf\x57\xed\x8d\xf5\xc4\x85\xea\x95\x12\xaa\x0a\x77\x93\x96\xbe\xa6\x77\x15\x04\x4f\x9a\xc7\xf9\xfd\xae\x02\x78\x65\x6f\x5b\x48\x73\xa3\x30\x4e\xfb\x14\xc9\xd3\x24\xe8\x6e\x36\xff\xdb\xee\x76\x4f\xb0\x4f\x9f\xba\xae\xff\x9f\x0a\x33\xfd\x13\xb0\x3f\x1e\x52\x31\x44\xd2\x16\xbe\xa6\xdc\xef\x48\x53\x7f\x95\xb3\xdb\x44\xcf\x3d\x39\x1b\x54\x00\x03\x7a\xee\x29\xea\x01\x27\x3d\x8d\xd2\x02\x76\x76\x72\xb6\xfa\x27\x00\x00\xff\xff\x57\x6d\xb2\x1b\xef\x06\x00\x00"

func bvlc_reference_rcnn_ilsvrc13YmlBytes() ([]byte, error) {
	return bindataRead(
		_bvlc_reference_rcnn_ilsvrc13Yml,
		"bvlc_reference_rcnn_ilsvrc13.yml",
	)
}

func bvlc_reference_rcnn_ilsvrc13Yml() (*asset, error) {
	bytes, err := bvlc_reference_rcnn_ilsvrc13YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bvlc_reference_rcnn_ilsvrc13.yml", size: 1775, mode: os.FileMode(420), modTime: time.Unix(1501524019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bvlc_alexnet.yml": bvlc_alexnetYml,
	"bvlc_googlenet.yml": bvlc_googlenetYml,
	"bvlc_reference_caffenet.yml": bvlc_reference_caffenetYml,
	"bvlc_reference_rcnn_ilsvrc13.yml": bvlc_reference_rcnn_ilsvrc13Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bvlc_alexnet.yml": &bintree{bvlc_alexnetYml, map[string]*bintree{}},
	"bvlc_googlenet.yml": &bintree{bvlc_googlenetYml, map[string]*bintree{}},
	"bvlc_reference_caffenet.yml": &bintree{bvlc_reference_caffenetYml, map[string]*bintree{}},
	"bvlc_reference_rcnn_ilsvrc13.yml": &bintree{bvlc_reference_rcnn_ilsvrc13Yml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

