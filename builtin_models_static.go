// Code generated by go-bindata.
// sources:
// builtin_models/bvlc_alexnet.yml
// builtin_models/bvlc_googlenet.yml
// builtin_models/bvlc_reference_caffenet.yml
// builtin_models/bvlc_reference_rcnn_ilsvrc13.yml
// DO NOT EDIT!

package caffe

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bvlc_alexnetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x4b\x6f\xe3\x36\x10\xbe\xeb\x57\x0c\x60\x2c\x90\xb4\x96\xfc\x88\x93\xba\x3a\x14\x68\x73\x2a\x50\xe4\x50\xb4\xbd\x14\x85\x31\xa2\x46\x16\x37\x14\x49\x90\x43\x27\xf9\xf7\x05\x1f\xb2\x9d\x6e\xba\x9b\x83\x42\x72\xbe\x99\xf9\x38\x2f\x5a\xe3\x44\x2d\xfc\xf2\xd7\x6f\x8f\xf5\xcf\x8a\x5e\x9f\x88\x61\x01\xf1\x10\xcc\x00\x6f\x26\x38\x98\x4c\x4f\xaa\x1a\x1c\x4e\xf4\x62\xdc\x73\x5b\x01\x64\xa5\x47\x1c\x06\x82\x05\x9c\x45\x30\x18\x07\x3c\x52\x51\x01\x38\x91\xf3\xd2\xe8\x16\x36\xcd\xfa\x1d\xb0\x08\x40\x18\xcd\x0e\xa5\xe6\xea\x3f\xd0\x19\x20\xf5\x60\xdc\x84\x9c\xd7\xe0\x69\x42\xcd\x52\x9c\xe5\x59\x5a\x45\x3b\x28\x35\xb9\x16\x16\x70\xde\x78\x08\x9e\x7a\x60\x03\x96\x5c\x44\x66\x62\x60\x1d\xf5\x52\x44\x9b\x15\x5c\xfe\x16\x30\x05\xc5\xd2\x2a\x02\xab\x90\x23\xde\x83\x40\x0d\x1d\x81\xb7\x24\xe4\x20\xa9\xaf\x00\x70\xea\x1f\x76\x6d\xd2\x3c\xda\xd0\x82\x43\x69\x9d\xf9\x4c\x82\x57\x02\xdd\xa4\x6a\x11\xe3\xd2\x26\x58\x2d\x6c\x48\x48\xf1\x4d\xe4\x31\x21\xad\x15\x0f\x3b\x45\xed\x37\x95\x0a\xb0\xa8\x7d\x9d\xca\x35\xb6\x27\x2f\x9c\xb4\x9c\x62\xfd\x53\x05\xf0\xc7\x48\xd0\x05\xdd\x2b\xea\x4b\x78\xa4\x4f\x49\x94\x4c\x2e\x07\xfe\xee\x61\xbd\x5c\xaf\xd7\xe0\x35\x5a\x3f\x1a\x6e\xb2\x12\x79\x86\x13\x2a\xd9\x63\x09\x65\x89\x32\x6a\x41\xd0\x07\x27\xf5\x11\x52\x76\xe3\xe2\x05\xfd\xb5\xc5\xfb\x7d\xb2\xf8\x22\x79\xbc\xb2\x01\x28\x44\x70\x28\xde\x2a\x80\xfb\x1f\x9a\xed\xfd\xfe\x13\xa0\xee\x41\x19\xef\x61\xd3\xec\xef\x7e\xdc\xed\xa3\x73\xe9\x0b\x55\xd3\xc5\x4c\x7b\x40\x60\x63\xeb\xcd\x59\x3f\x6a\x6f\xb2\x2e\x56\x90\x84\xf7\x17\xe1\x7e\xdd\x6c\x3f\x81\xd1\xe9\x9a\x57\xde\x3d\xf1\x12\x82\x8f\x74\x3f\x07\xcf\x49\x2c\x48\x33\x39\x10\xce\xd8\xa6\x02\xb8\xf9\x33\x89\xa3\x04\x4f\xe4\xf0\x98\xfa\x64\xb3\x4e\x00\xbf\x84\x9b\x1d\x7c\x0f\x9b\xa2\x75\x0b\xdf\xc1\x16\x26\xe9\x9c\x71\x4b\xf0\xa3\x09\xaa\x2f\x94\x63\x1d\x41\x27\x19\x46\x79\x1c\xc9\x9d\xb9\x35\xb7\x95\xa3\x81\x1c\x69\x41\x3e\x16\xf3\x65\x97\xea\x18\x6d\x2c\xeb\x15\xbc\x50\xe7\x25\x53\x5c\x12\x8b\xa6\x81\x9c\xd7\x6e\x26\x37\x77\x60\x0d\x23\xb3\x6d\x57\xab\xac\xd9\x68\x69\x7d\x23\x44\xde\xae\x76\xfb\xed\xae\x96\x13\x1e\x49\x13\xd7\x42\xa1\xf7\x72\x90\x22\x45\xa3\x8e\xb9\xa9\x7b\x22\x5b\x0b\xa3\x4f\x46\x85\x78\x8a\xaa\xd6\x14\x5c\xfa\xc7\xb1\x95\x7d\x63\xfb\xa1\x5a\x80\x92\x82\xb4\x4f\xd1\xb8\xf8\x2f\x87\x2d\x04\xed\xc8\xb3\x93\x82\xa9\xaf\x16\x20\xb5\x0d\x9c\x2e\x74\xc1\xe6\xb3\x58\xf8\x0b\x18\xa4\xf3\x9c\x51\xc0\x6f\x96\xbe\x18\x2c\x75\x3a\x6e\x21\x71\xaf\x72\xf7\x5e\x55\xf6\xcc\xe2\xca\x4e\x02\xbd\x2b\xfe\x54\xe3\xc9\xc5\xc5\x8a\xc5\x38\xa2\x98\x5c\x8a\x7d\x72\x7d\x39\x2a\xc3\xa2\x97\x13\xe9\x38\x7c\x7c\x0b\x7f\x6f\x96\x70\xb7\x84\xed\x76\x97\x3e\xff\x54\x26\xb0\x0d\x9c\x6f\x11\x1d\x24\x13\x85\x4d\x96\xc5\x72\x4c\xdc\x07\x42\x0e\x8e\x12\x14\x3f\x62\x9f\xf1\x17\x02\xd5\x07\x17\x28\x18\x85\x5d\x8a\xcb\x15\xff\x12\x95\x8f\xee\x50\x3c\xfb\x43\x70\xaa\x9d\x0b\xa4\x47\xc6\xa6\x9f\x94\x68\x26\xb5\x9a\x5e\x35\xf1\x2a\x45\xdb\xaf\xe6\x02\x59\xf9\x37\xed\x89\x1b\x7e\xe5\x2a\x89\x62\x8c\xe6\xc9\x38\x77\xe4\xd1\xa1\x1d\x53\xe3\xbd\x90\x3c\x8e\xec\xc1\x91\x37\xc1\x09\x8a\xbe\x3b\xf4\xf4\xde\xab\x6a\xd2\x8c\x6a\x3a\x72\xcf\xa4\xe8\xed\x24\x63\x68\x1b\xe3\x8e\xab\x0a\xb2\xb5\x83\x45\x1e\x5b\xe8\x4e\x4a\x1c\x50\x51\xa4\x96\x95\xe6\x6a\x90\xfe\x80\x4e\x8c\xf2\x14\xa3\x8a\xca\xc7\x47\x49\x0e\xb9\x9d\x79\xa4\xdc\xe7\xb3\xeb\x38\xde\x10\xe2\x82\x0d\xa0\x86\xa2\x79\xfd\x12\x5c\x3d\x09\x51\xf3\x42\xe2\xfa\x5e\xf9\x20\x99\xef\x49\x1b\xa6\xb8\xfe\x1f\x2b\x83\x54\x94\x1e\x4d\x3f\xe7\xf6\xcb\x30\xc5\x76\x93\x99\xea\x4c\x09\x99\x9d\xec\x02\xe7\x49\x40\xaf\xec\x10\x4a\xdb\xc1\x45\x56\x01\x3c\x4b\xdd\xb7\xf0\xf8\xf4\x54\x18\xc7\x7d\xf4\x94\x5b\xf5\xac\x73\xf3\xf8\xf4\xb4\x84\xdf\xe3\xa7\x69\x9a\xdb\x58\x89\x65\x3c\x1f\x62\xf6\x3d\x71\x0b\xbf\xc6\x64\xe7\x5f\x01\xe5\xec\xfc\x88\xa6\x26\x2c\x0a\x15\xc0\x84\x5a\x0e\xe4\xf9\x80\x81\x47\xe3\x5a\xc0\xae\x0f\xaa\xaf\xfe\x0d\x00\x00\xff\xff\xfd\xc1\x6c\x63\x52\x08\x00\x00"

func bvlc_alexnetYmlBytes() ([]byte, error) {
	return bindataRead(
		_bvlc_alexnetYml,
		"bvlc_alexnet.yml",
	)
}

func bvlc_alexnetYml() (*asset, error) {
	bytes, err := bvlc_alexnetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bvlc_alexnet.yml", size: 2130, mode: os.FileMode(420), modTime: time.Unix(1501875427, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bvlc_googlenetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x4d\x8f\xdb\x36\x10\xbd\xeb\x57\x0c\xe0\x4b\x0b\xec\x4a\xd6\xc7\xee\xda\x3a\xf4\xd0\x2d\x10\x04\x08\xf6\x90\x00\xb9\x14\x85\x31\x22\x47\x32\x1b\x8a\x24\xc8\x91\x77\xdd\x5f\x5f\x90\x92\x2d\xa7\x49\x1a\x1f\x0c\x8a\x7c\xf3\xc1\xf7\x66\x38\x06\x47\x6a\xe1\xf7\xcf\x1f\x9e\xef\xdf\x59\x3b\x7c\xa0\x17\x62\xd8\x40\xdc\x06\xdb\xc3\xd9\x4e\x1e\x46\x2b\x49\x67\xbd\xc7\x91\x5e\xad\xff\xd2\x66\x00\xb3\xd9\x33\xf6\x3d\xc1\x06\xae\x47\xd0\x5b\x0f\x7c\xa4\xc5\x04\xe0\x44\x3e\x28\x6b\x5a\x28\xf3\xed\x57\xc0\xe5\x00\x84\x35\xec\x51\x19\xce\xfe\x03\xbd\x00\x94\xe9\xad\x1f\x91\xe7\x35\x04\x1a\xd1\xb0\x12\xd7\xf3\xf9\x34\x8b\x7e\x50\x19\xf2\x2d\x6c\xe0\xfa\x11\x60\x0a\x24\x81\x2d\x38\xf2\x11\x39\x27\x06\xce\x93\x54\x22\xfa\xcc\x60\xfd\x6d\x60\x9c\x34\x2b\xa7\x09\x9c\x46\x8e\xf8\x00\x02\x0d\x74\x04\xc1\x91\x50\xbd\x22\x99\x01\xe0\x28\x1f\x9b\x36\x59\x0e\x6e\x6a\xc1\xa3\x72\xde\xfe\x4d\x82\x0b\x81\x7e\xd4\xf7\x22\xf2\xd2\x26\xd8\xbd\x70\x53\x42\x8a\x9f\x22\x87\x84\x74\x4e\x3c\x36\x9a\xda\x9f\x1a\x2d\xc0\xc5\xec\xff\x53\xb9\xc5\x4a\x0a\xc2\x2b\xc7\x89\xeb\xdf\x32\x80\x55\xf7\xa4\x04\x49\xb0\x06\xde\x7f\xf8\xf4\xf9\xe3\x33\x54\xdb\xb2\xba\x03\xd4\xa3\x0d\x0c\xf4\x86\x82\xf5\x19\x30\xc0\xec\xa4\x23\x19\x35\x79\x67\x95\x19\xe0\x0f\x22\x47\x1e\x5e\x15\x1f\xe1\xd9\x9a\x93\xd5\x53\x8c\x11\xa0\x3b\xc3\xa7\x7f\x68\x20\x79\x06\x62\x40\x9d\x47\x9b\xd5\x7f\x93\x67\x9e\x7a\xf2\x64\x04\x85\xa8\xde\xfa\x95\x84\x43\x17\x75\x2c\xe0\x95\xba\xa0\x98\xe2\x92\x58\xe4\xf9\x25\x87\x18\xfb\xb6\xe4\xee\xe1\xc8\xec\x42\x5b\x14\xe8\xdf\xd4\x29\xb7\x7e\x28\x9c\xec\x8b\xb2\xd9\xee\xf3\x66\xd7\x54\xb9\x93\x7d\xb6\x01\xad\x04\x99\x90\xaa\x7c\x35\x5f\x36\x5b\x98\x8c\xa7\xc0\x5e\x09\x26\x99\x6d\x40\x19\x37\x71\xca\x67\xc5\xce\x7b\x51\xa8\x0d\xf4\xca\x07\x9e\x51\xc0\x67\x47\xdf\x34\xc2\x7d\xda\x6e\x41\x8d\x38\x50\x36\x57\xdb\x8d\x12\x97\x2c\x6e\xfc\x24\xd0\x57\x62\x45\xc0\x1c\x62\xf5\xe2\x30\xb6\x14\x93\x4f\xd4\xa5\xd0\xeb\xd6\x52\xdc\x52\x8d\x64\x62\xb3\x84\x16\xfe\x2c\xef\xa0\xbe\x83\xaa\x6a\xd2\xdf\x5f\x0b\x64\x24\x34\xed\x95\xb8\x41\xf1\x71\xea\x72\x61\xc7\xe2\xa3\xed\xc8\xf3\x76\x57\x56\x85\x24\x72\x01\xb5\x24\x2e\x3c\xbe\x16\x23\x06\x26\x5f\xa4\x02\xbb\x0f\xa8\x0b\x89\x8c\x85\xd2\xe1\xe4\x45\x59\x15\x29\x45\x43\x7c\x88\xae\xf3\x4e\x19\xf4\x67\xe7\x2d\xdb\xcc\x4e\xec\x26\x9e\x79\x8b\x57\x4a\x49\x2f\xf7\x9f\xcf\x32\x58\xd8\xea\x09\x79\xf2\x94\xa0\xf8\x3d\xbe\x66\xfc\x7a\xe5\xec\x3b\x94\x2d\x18\x8d\x5d\x52\xe2\x86\xb1\x45\x87\xef\xb1\xb6\x44\x0e\x87\xc9\xeb\x5b\x62\x02\xe7\x33\x3b\x53\x20\x1f\xdf\x19\x32\x9c\x88\x42\x63\xcd\x79\xb4\x53\x28\x70\x57\x35\x1d\xd6\x75\xdd\xe1\xbe\xaa\xf6\x35\xd2\x6e\x2b\xe5\x4e\x3e\x3e\x3e\xc9\x7a\x5f\x96\x89\xbd\xae\x92\xa5\xac\x04\x4a\xac\x9f\x08\xcb\x66\x57\xee\xb0\x7b\x12\x35\x55\xd5\x5e\x34\xfb\xae\xab\x2a\xd1\x3c\xd4\x0f\x29\x64\xaf\x34\x95\x39\xbf\x71\x96\xca\x29\x2a\x7d\x79\x8f\xc2\xf2\xa2\x0d\x1e\xdd\x11\xd0\x48\x78\x25\x35\x1c\x39\x80\xa7\x60\x27\x2f\x28\xde\x27\x9d\x1e\x1c\xf2\x71\xbd\x8b\xc7\xd7\x1f\x5c\x25\x4e\x83\x59\xd7\x62\xb7\xed\x9b\xa6\xdc\x6e\xa9\xdc\xf7\xb2\x7e\x2a\xfb\xfe\xe1\xa1\xa3\xae\x26\x51\xa1\x7c\xd8\x97\xfb\xbe\x7b\x44\xd1\xd4\x45\xca\x22\x14\xdd\x49\x8b\xc3\x60\xed\xa0\xa3\xf6\x85\x24\xa7\xed\x39\x4f\xba\xc7\xf4\xe1\x92\xdd\x4d\x2e\x6d\x51\x48\x9d\xa7\x70\x79\x47\xfe\x0b\x69\x3a\x9f\x54\x2c\xd7\xd4\xba\x5f\x7b\x9c\x71\x97\xa6\x52\xe1\x80\x5e\x1c\xd5\x29\x96\x0a\xea\x10\x67\x91\xea\x21\x10\xdf\x45\xe5\x4d\x92\xbf\xc3\x40\x51\x45\x50\x01\x10\xe2\x82\x2d\xa0\x81\xc5\xf2\x76\x00\xdc\x4c\x82\x68\xb9\xb2\x76\x4b\xec\xbc\x91\xdc\x4b\x32\x96\x29\xae\x7f\xe0\x25\x0a\x97\x66\x65\xb8\x14\xec\xb7\x3a\xc5\x07\x53\xcd\xa9\x5e\x52\x42\x66\xaf\xba\x89\xe7\xf7\x90\xde\xd8\x23\x18\xe2\x34\x38\xd7\xb3\x0c\xe0\x8b\x32\xb2\x85\xe7\x97\x97\x25\xe3\xf8\x1d\x23\x19\x9a\x3c\xea\xab\xcd\x2f\xcf\x2f\x2f\x77\xf0\x31\xfe\xe5\x79\xfe\x6b\x6c\xaf\xf8\xd2\x2b\x33\x1c\x62\xd3\x06\xe2\x16\xde\xc7\x7e\x9d\x87\xff\xb2\x77\x9d\x9d\xe9\x2d\x5b\x0c\x32\x80\x11\x8d\xea\x29\xf0\x01\x27\x3e\x5a\xdf\x02\x76\x72\xd2\x32\xfb\x37\x00\x00\xff\xff\x10\x64\x4b\xdf\x4b\x08\x00\x00"

func bvlc_googlenetYmlBytes() ([]byte, error) {
	return bindataRead(
		_bvlc_googlenetYml,
		"bvlc_googlenet.yml",
	)
}

func bvlc_googlenetYml() (*asset, error) {
	bytes, err := bvlc_googlenetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bvlc_googlenet.yml", size: 2123, mode: os.FileMode(420), modTime: time.Unix(1501879520, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bvlc_reference_caffenetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x4f\x6f\xe3\xb6\x13\xbd\xeb\x53\x0c\xe0\xcb\xef\x07\x44\x52\xec\x38\xe9\x46\x87\x02\x6d\x4e\x41\x17\x46\x91\x05\xf6\x52\x14\x06\x45\x0e\x6d\x36\x14\x49\x90\x23\x27\xee\xa7\x2f\x86\x94\xfc\xa7\x9b\xed\xe6\xe0\x48\x9c\x37\x33\x6f\x66\x1e\x47\x4e\x0c\xd8\xc1\x0b\x6a\x8c\xe8\x24\xc2\x93\xd0\x1a\x37\x48\xb0\x00\x36\x81\xd7\x70\xf4\x63\x84\xc1\x2b\xb4\x95\x8e\x62\xc0\x37\x1f\x5f\xbb\x0a\xa0\xb8\x66\x07\x58\xc0\xc9\x04\xda\x47\xa0\x3d\x4e\x2e\x00\x07\x8c\xc9\x78\xd7\xc1\xb2\xb9\xbd\x02\x4e\x06\x90\xde\x51\x14\xc6\x51\xf5\x2f\xe8\x0c\x30\x4e\xfb\x38\x08\x2a\xcf\x90\x70\x10\x8e\x8c\x3c\xd9\x8b\xb5\xe2\x38\xc2\x38\x8c\x1d\x2c\xe0\xf4\x92\x60\x4c\xa8\x80\x3c\x04\x8c\x8c\x2c\xc4\x20\x44\x54\x46\x72\xcc\x0a\xce\x7f\x0b\x18\x46\x4b\x26\x58\x84\x60\x05\x31\x3e\x81\x14\x0e\x7a\x84\x14\x50\x1a\x6d\x50\x55\x00\x62\x50\x0f\xeb\x2e\x7b\xee\xc2\xd8\x41\x14\x26\x44\xff\x17\x4a\x6a\xa5\x88\x83\xad\x25\xf7\xa5\xcb\xb0\x5a\x86\x31\x23\xe5\x0f\x91\xbb\x8c\x0c\x41\x3e\xac\x2d\x76\x3f\x74\x9a\x80\x93\xdb\x7f\x53\xb9\xc4\x2a\x4c\x32\x9a\x40\xb9\xd7\x3f\x57\x00\xbf\x58\x7c\xe7\xa9\xe7\x39\xa0\x02\xef\xe0\xf9\xf3\x97\xaf\x2f\x4f\xb0\xba\x5d\xae\x6e\xe0\xcd\xd0\x1e\x04\x0c\xc6\xf9\x08\x07\x11\x4d\x19\x86\x8e\x7e\xc8\xb3\x9e\x27\x21\x12\x94\xd8\x3d\x2a\x1e\xd5\xf3\x20\x76\x59\x4e\xd2\x8a\x94\x8c\x36\xb2\x38\xe6\x78\x0a\x31\xf0\x9c\x0e\xde\x8e\x7c\x2a\x2c\x38\x1c\x63\xfe\x47\xac\x90\x04\xfd\x11\x7e\x8b\xe6\xef\x3d\x1e\xd2\xeb\x11\x90\x40\xd8\x86\xe3\x6e\x9e\x7f\xff\x92\xa9\x35\x55\x9c\xb5\x9b\x78\xec\xe7\xb7\x3c\x71\x11\x58\x00\x2d\xbc\x61\x9f\x0c\x21\x3f\x22\xc9\xa6\x99\x59\x1a\xb7\xbb\xd2\x6a\x0d\x7b\xa2\xd0\xb5\x6d\xf1\x6c\x9c\x09\xa9\x91\xb2\xbc\xb6\xeb\x4f\xab\x75\x6d\xb8\x24\x87\x54\x5f\x97\x54\x73\x49\x35\x97\x54\x5f\x95\x54\x97\x92\xea\xb9\xa4\x26\x28\x5d\x2d\xc0\x1a\x89\x2e\xe5\xfb\x75\xce\x3f\x1d\x76\x30\xba\x88\x89\xa2\x91\x84\xaa\x5a\x80\x71\x61\xa4\x5c\xd0\x19\x5b\xce\x58\x22\x0b\xd0\x26\x26\x2a\x28\xa0\x63\xc0\x6f\xae\x60\x9d\x8f\x3b\xc8\xdc\xab\xa2\xf3\x0b\x0d\xcc\x2c\x2e\xe2\x64\xd0\x95\x4c\x18\x50\x52\x9c\xa3\x04\xc1\x97\x99\x30\xe6\xde\xe7\xd4\xe7\xa3\xe9\x5a\x29\x33\xa0\x63\x71\xa4\x0e\xfe\x58\xde\xc0\xdd\x0d\xac\x56\xeb\xfc\xf3\x67\xe5\x47\x0a\x23\x95\x2a\x38\x41\x0e\x31\xb1\x29\xb6\x0a\x26\xee\x1a\x05\x8d\x11\x33\x54\x7c\xc4\xbe\xe0\xcf\x04\xaa\x0f\x0a\x98\x30\x56\xf4\xb9\x2f\x17\xfc\xa7\xae\x7c\x54\xc3\x94\x39\x6d\xc7\x68\xbb\x59\x20\x4a\x90\x68\xd4\x60\x65\x33\xd8\x76\x78\x77\x48\x6d\xee\x76\x6a\x67\x81\xb4\xe9\xe8\x12\x52\x43\xef\x54\x65\x13\xf7\x68\xde\x21\x69\xda\x42\xbb\x28\xc2\x1e\x84\x53\xf0\x86\x66\xb7\xa7\x04\x11\x93\x1f\xa3\x44\xce\x9d\xad\xdb\x20\x68\x5f\xf2\xa6\xae\x6d\xa3\x78\x6b\x76\x86\xf6\x63\x3f\x26\x8c\xbc\xe6\xd0\x51\x23\xfd\xd0\xfe\xfa\xf5\xf3\x53\x9b\x2f\x7b\xfb\xe9\x56\xaf\xd7\xcb\xdb\x5b\x5c\x3e\x6a\x75\xf7\xd3\x52\xeb\xfb\xfb\x1e\xfb\x3b\x94\x2b\xa1\xee\x1f\x97\x8f\xba\x7f\x10\x72\x7d\x37\x73\xee\x0f\x56\x6e\x4f\x77\x67\x9b\x83\x70\x09\x0a\x83\xf5\xc7\x26\x44\x4f\x9e\xeb\x80\x99\xe6\x05\x29\x6e\x86\x6d\xb2\x4b\xd3\x63\x7c\x45\x8b\xc7\x83\xe1\x89\x37\x3e\xee\xbe\x17\xba\x38\xcc\x02\x35\x69\x2b\xa2\xdc\x9b\x03\x0f\x5a\xd8\xc4\x5f\x14\xa3\x21\x21\xdd\xf0\xdc\x5c\x1e\x5e\x2f\x12\xf2\x0c\xc0\x24\x10\xc0\x0f\xe4\x41\x38\x98\x3c\x2f\xd7\xf8\xc5\x3e\x67\xcf\x73\x1f\x2f\x5b\x5d\x0e\x72\x78\x85\xce\x13\xf2\xf3\x77\xa2\x68\x63\x31\x7f\xf1\xd2\x2c\xb7\x6f\x27\xc7\x1b\xc0\x14\xaa\x33\x25\x41\x14\x4d\x3f\x52\x59\x4e\xf8\x4e\x51\xcc\xcb\x0d\xce\xb6\x0a\xe0\xd5\x38\xd5\xc1\xd3\x66\x33\x31\xe6\x77\xce\x74\xbd\x10\xe1\x7f\x4f\x9b\xcd\x0d\xbc\xf0\x4f\xd3\x34\xff\xe7\xcb\xc1\x1b\xdb\xb8\xdd\x96\x05\x99\x90\xba\xf3\xce\x5d\xc0\x74\x76\xfa\x02\xe6\xbd\x30\x39\x54\x00\x83\x70\x46\x63\xa2\xad\x18\x69\xef\x63\x07\xa2\x57\xa3\x55\xd5\x3f\x01\x00\x00\xff\xff\x5b\xe1\x1b\xa8\x15\x08\x00\x00"

func bvlc_reference_caffenetYmlBytes() ([]byte, error) {
	return bindataRead(
		_bvlc_reference_caffenetYml,
		"bvlc_reference_caffenet.yml",
	)
}

func bvlc_reference_caffenetYml() (*asset, error) {
	bytes, err := bvlc_reference_caffenetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bvlc_reference_caffenet.yml", size: 2069, mode: os.FileMode(420), modTime: time.Unix(1501880178, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bvlc_reference_rcnn_ilsvrc13Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x4b\x8f\xeb\x36\x0f\xdd\xfb\x57\x10\xc8\xe6\xfb\x80\x89\x3d\xc9\xa4\x77\xe1\x45\x37\x59\x14\x17\x28\x82\x22\x05\xee\xa6\x28\x02\x5a\xa2\x13\x76\x64\x59\xa0\xe8\xcc\xe4\xdf\x17\x92\x9c\xc7\xf4\x4e\x7b\xb3\x30\xf4\x38\x24\x8f\x0e\x1f\xf1\x38\x50\x0b\x7b\xea\x49\xc8\x1b\x82\xfd\x72\xbb\xdb\xc1\xd7\x5f\x7f\xff\xb6\xdf\x2e\xd7\xcf\xab\x17\x58\x40\xc2\xc0\xd8\xc3\x65\x9c\x04\x86\xd1\x92\xab\x7a\xc1\x81\xde\x46\x79\x6d\x2b\x80\xe2\x63\x8b\x7d\x4f\xb0\x80\xdb\x15\xf4\xa3\x80\x9e\x68\x36\x01\x38\x93\x44\x1e\x7d\x0b\xab\xfa\xf9\x03\x70\xbe\x00\x33\x7a\x15\x64\xaf\xd5\x3f\xa0\x57\x00\xfb\x7e\x94\x01\xb5\xac\x21\xd2\x80\x5e\xd9\xdc\xee\xcb\x6d\x95\xfc\x20\x7b\x92\x16\x16\x70\xdb\x44\x98\x22\x59\xd0\x11\x02\x49\x42\x16\x62\x10\x84\x2c\x9b\xe4\xb3\x82\xfb\x6f\x01\xc3\xe4\x94\x83\x23\x08\x0e\x35\xe1\x23\x18\xf4\xd0\x11\xc4\x40\x86\x7b\x26\x5b\x01\xe0\x60\xbf\x6c\xda\x6c\x79\x0c\x53\x0b\x82\x1c\x64\xfc\x8b\x8c\x36\x06\x65\x70\x4b\x93\x74\x69\x33\x6c\x69\xc2\x94\x91\xe6\x87\xc8\x63\x46\x86\x60\xbe\x6c\x1c\xb5\x3f\x34\x9a\x81\xb3\xd9\x7f\x53\x79\xc4\x5a\x8a\x46\x38\x68\xd6\xfa\xe7\x14\x71\x12\x9a\x53\xc9\x43\x70\x34\x90\xd7\xa2\xf7\xd8\xcf\xc5\x81\x11\x8a\x59\x47\x16\xba\x0b\xfc\xc2\x12\x4f\x6c\x5e\x81\x14\xd0\xd5\x29\x31\xdb\x6f\xbf\xed\x61\xfd\xbc\xda\x54\x72\xad\xac\x98\x72\x71\xdf\xe5\x34\x60\x48\x59\x69\xe0\x8d\xba\xc8\x4a\x69\x49\x6a\xea\xfa\xea\x9f\xfd\xf1\x43\x01\x2d\xe1\xa4\x1a\x62\xdb\x34\x28\xef\x7c\xae\x47\x39\x36\xc1\xf6\xcd\xea\x65\xb5\xaa\xd7\x3f\xad\x37\x75\xb0\x7d\xb5\x00\xc7\x86\x7c\xcc\x35\x7b\x37\x9f\x0f\x5b\x98\xbc\x50\x54\x61\xa3\x64\xab\x05\xb0\x0f\x93\x66\x3e\x77\x6c\x39\x4b\xb2\x2f\xa0\x67\x89\x5a\x50\xa0\x97\x40\xdf\x95\xf5\x32\x1f\xb7\xc0\x03\x1e\xa9\x2a\xb5\xf3\xa0\xeb\x95\xc5\x83\x9f\x0c\xfa\x20\x7d\x02\x94\x10\x77\x2f\x01\x53\x83\x28\x49\x96\x2e\x87\xbe\x1f\xcd\xa5\x6a\x79\x20\x9f\x4a\x3f\xb6\xf0\xc7\xea\x09\x5e\x9e\x60\xbd\xde\xe4\xcf\x9f\xd5\x38\x69\x98\xb4\xbc\x22\x05\xc8\x2e\x66\x36\xe5\xae\x82\x99\x7b\x4f\xa8\x93\x50\x86\xe2\x67\xec\x0b\xfe\x4e\xa0\xfa\xe4\x01\x33\xc6\x61\x97\x75\x79\xe0\x3f\xab\xf2\xd9\x1b\xe6\xc8\xf1\x30\x89\x6b\x73\x7e\xdb\xa6\xb1\xa8\x58\xdb\xc1\x99\x7a\x70\xcd\xf0\xee\x49\x9b\xac\x76\x6c\xb2\x3c\x69\x1f\x2f\x3e\x92\xd6\xfa\xae\x55\xbe\x4a\x1a\x5d\xfb\x32\xce\x9d\x7d\x14\x0c\x27\x40\x6f\xe1\x8d\xf8\x78\xd2\x08\x42\x71\x9c\xc4\x50\x8a\xdd\x61\xa4\x8f\x51\x5d\x9d\x3b\xa4\xee\x48\x5e\xc9\xd1\xe5\xcc\x49\xda\x54\x66\x15\x14\x67\x87\x80\x7a\x6a\xa1\x3b\x3b\x73\xb8\x15\xf3\x41\x8c\xf7\x07\x76\xf1\x2c\x66\xf5\x52\x7c\x5c\x8b\x83\xe3\x01\xc5\x9c\xf8\x9c\x44\x46\x17\xd3\x84\xe4\x1e\x22\xe9\x53\xd2\xcc\x67\xe1\xae\x4c\x80\x23\x20\xa4\x85\x8e\x80\x1e\x66\xcb\xc7\xb1\xf4\x30\x9f\x92\xe5\x9d\xd4\xe3\x33\xcb\x41\x76\x6f\xc9\x8f\x4a\x69\xfd\x2f\x5e\x7a\x76\x94\x27\x78\xbc\xa6\xfa\x7b\xd5\xde\x58\x4f\x5c\xa8\x5e\x29\xa1\xaa\x70\x37\x69\xe9\x6b\x7a\x57\x41\xf0\xa4\x79\x9c\xdf\xef\x2a\x80\x57\xf6\xb6\x85\x34\x37\x0a\xe3\xb4\x4f\x91\x3c\x4d\x82\xee\x66\xf3\xbf\xed\x6e\xf7\x04\xfb\xf4\xa9\xeb\xfa\xff\xa9\x30\xd3\x3f\x01\xfb\xe3\x21\x15\x43\x24\x6d\xe1\x6b\xca\xfd\x8e\x34\xf5\x57\x39\xbb\x4d\xf4\xdc\x93\xb3\x41\x05\x30\xa0\xe7\x9e\xa2\x1e\x70\xd2\xd3\x28\x2d\x60\x67\x27\x67\xab\xbf\x03\x00\x00\xff\xff\xbc\xb8\x7a\x09\xee\x06\x00\x00"

func bvlc_reference_rcnn_ilsvrc13YmlBytes() ([]byte, error) {
	return bindataRead(
		_bvlc_reference_rcnn_ilsvrc13Yml,
		"bvlc_reference_rcnn_ilsvrc13.yml",
	)
}

func bvlc_reference_rcnn_ilsvrc13Yml() (*asset, error) {
	bytes, err := bvlc_reference_rcnn_ilsvrc13YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bvlc_reference_rcnn_ilsvrc13.yml", size: 1774, mode: os.FileMode(420), modTime: time.Unix(1501875272, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bvlc_alexnet.yml": bvlc_alexnetYml,
	"bvlc_googlenet.yml": bvlc_googlenetYml,
	"bvlc_reference_caffenet.yml": bvlc_reference_caffenetYml,
	"bvlc_reference_rcnn_ilsvrc13.yml": bvlc_reference_rcnn_ilsvrc13Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bvlc_alexnet.yml": &bintree{bvlc_alexnetYml, map[string]*bintree{}},
	"bvlc_googlenet.yml": &bintree{bvlc_googlenetYml, map[string]*bintree{}},
	"bvlc_reference_caffenet.yml": &bintree{bvlc_reference_caffenetYml, map[string]*bintree{}},
	"bvlc_reference_rcnn_ilsvrc13.yml": &bintree{bvlc_reference_rcnn_ilsvrc13Yml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

