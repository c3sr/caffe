// Code generated by go-bindata.
// sources:
// builtin_models/bvlc_alexnet.yml
// builtin_models/bvlc_googlenet.yml
// builtin_models/bvlc_reference_caffenet.yml
// builtin_models/bvlc_reference_rcnn_ilsvrc13.yml
// DO NOT EDIT!

package caffe

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bvlc_alexnetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x41\x6f\xe3\xba\x11\xbe\xeb\x57\x0c\x60\x2c\x90\xb4\x96\x64\xc9\x4e\xe2\xa8\x40\x81\x36\xbd\x14\x28\x72\x58\xb4\xbd\x14\x45\x30\x22\x47\x16\x77\x29\x52\x20\x47\x4e\xbc\xbf\xfe\x81\xa4\x14\x39\x6f\x77\xdf\xe6\xe0\x48\x9c\x6f\x86\xc3\x6f\x66\x3e\xd1\xe0\x40\x0d\xfc\xfd\xbf\xff\x7a\xca\xff\xa6\xe9\xed\x99\x18\x36\x10\x16\xc1\x76\x70\xb1\x93\x83\xc1\x4a\xd2\x59\xe7\x70\xa0\x57\xeb\xbe\x36\x19\x40\x72\x7a\xc2\xae\x23\xd8\xc0\xbb\x09\x3a\xeb\x80\x7b\x9a\x5d\x00\xce\xe4\xbc\xb2\xa6\x81\xaa\xd8\x7d\x00\xce\x06\x10\xd6\xb0\x43\x65\x38\xfb\x1d\x74\x01\x28\xd3\x59\x37\x20\xa7\x67\xf0\x34\xa0\x61\x25\xde\xed\xc9\x9a\x85\x38\xa8\x0c\xb9\x06\x36\xf0\xfe\xe2\x61\xf2\x24\x81\x2d\x8c\xe4\x02\x32\x25\x06\xa3\x23\xa9\x44\x88\x99\xc1\xfa\xb7\x81\x61\xd2\xac\x46\x4d\x30\x6a\xe4\x80\xf7\x20\xd0\x40\x4b\xe0\x47\x12\xaa\x53\x24\x33\x00\x1c\xe4\xfd\xa1\x89\x9e\xa7\x71\x6a\xc0\xa1\x1a\x9d\xfd\x42\x82\x4b\x81\x6e\xd0\xb9\x08\xbc\x34\x11\x96\x8b\x71\x8a\x48\xf1\x4b\xe4\x29\x22\xc7\x51\xdc\x1f\x34\x35\xbf\x74\x9a\x81\xb3\xdb\x1f\xa7\x72\x8d\x95\xe4\x85\x53\x23\x47\xae\xff\x9a\x01\xfc\xbb\x57\x7e\xe6\x45\x79\x40\x70\x34\x6a\x25\x12\xe3\xb6\x5b\xcb\x09\xc9\xb3\x25\x19\x0a\x11\x96\x97\x7e\x19\xa7\x76\xf1\x28\x32\x80\x7f\xa8\xae\x23\x47\x46\x90\x6f\xc0\x58\x86\x58\x61\x65\x4e\xf0\xaa\xb8\x8f\x9e\x8e\xb4\x3a\xf5\x1c\xd6\x24\x32\xe6\x38\x9d\x06\x32\x1c\x43\xfc\x25\x03\x50\x46\xb1\x42\xad\xbe\x05\x84\xb1\x26\xff\x46\xce\x42\xab\xd0\x93\x0f\xe5\xdc\x15\x15\x28\xe3\x99\x50\x86\x1c\x2b\xb8\xe9\xec\x64\x24\x18\x12\xe4\x3d\xba\x4b\xea\xc4\x79\xdf\x2d\xa0\x5f\x43\xa6\x93\xb1\x85\x0a\x4e\x78\x26\xe8\x34\x32\x68\xeb\xfd\x6d\x11\xd9\x20\x68\x27\x23\x35\xc9\x95\x94\x90\xb2\x62\x72\xc9\x75\x7f\xbf\xdb\xee\x76\x3b\xf0\x06\x47\xdf\x5b\x2e\x92\x13\x79\x86\x33\x6a\x25\x71\x6e\xac\xb9\xe7\xd0\x08\x02\x39\xb9\x70\x94\x95\x89\x90\xd1\x1a\xf1\xee\x18\x23\x46\x7e\xd6\x18\x80\x42\x4c\x0e\xc5\x25\x03\xb8\x7b\x28\xea\xbb\xe3\x27\x40\x23\x63\xb2\x50\x15\xc7\xfd\xe3\xe1\x58\x5c\xd7\xcf\xb6\xa1\xef\x43\x11\xd9\x8e\x79\xf5\xee\x1f\xbc\xab\xe4\x8b\x19\x44\xe3\xdd\x6a\x3c\xee\x8a\xfa\x13\xd8\x54\xd3\xab\xdd\x3d\xf1\x16\x26\x1f\xd2\xfd\x32\x79\x8e\x66\x41\x86\xc9\x81\x70\x76\x0c\x6c\xdd\xfc\x27\x9a\x83\x05\xcf\xe4\xf0\x14\x55\xa3\xda\x45\x80\xdf\xc2\xcd\x01\xfe\x0c\xd5\xec\x75\x0b\x7f\x82\x1a\x06\xe5\x9c\x75\x5b\xf0\xbd\x9d\xb4\x9c\x53\x0e\x53\x05\xad\x62\xe8\xd5\xa9\x27\xf7\x9e\x5b\x71\x9b\x39\x5a\x9b\x69\x03\xeb\x5b\x9c\x6a\x1c\xc3\x90\x97\xf0\x4a\xad\x57\x4c\xe1\x91\x58\x14\xc5\xd2\xab\x4b\x72\x8b\x1e\xe5\xd0\x33\x8f\x4d\x59\x26\xcf\xc2\xa8\xd1\x17\x42\xa4\xd7\xf2\x70\xac\x0f\xb9\x1a\xf0\x44\x86\x38\x17\x1a\xbd\x57\xdd\xdc\xd8\x79\xa8\x4d\x2e\x89\xc6\x5c\x58\x73\xb6\x7a\x0a\xab\xa8\x73\x43\x93\x8b\xff\x38\x08\x9b\x2f\x46\xd9\x65\x1b\xd0\x4a\x90\xf1\xf4\x61\x80\xb2\x79\xb1\x81\xc9\x38\xf2\xec\x94\x60\x92\xd9\x06\x94\x19\x27\x8e\x07\x5a\xb1\x69\x2d\xc8\xc0\x06\x3a\xe5\x3c\x27\x14\xf0\x65\xa4\xef\x64\x36\x8f\xcb\x0d\xc4\xdc\xb3\xa4\x65\x57\x73\xbe\x64\x71\x15\x27\x82\x3e\x48\x41\xec\xf1\xb8\xc5\x1a\x65\xc4\x20\xd8\x4c\x2e\x72\x1f\xb7\x5e\x97\x66\xe9\x94\x6a\x20\x13\xa4\xd8\x37\xf0\xbf\x6a\x0b\xfb\x2d\xd4\xf5\x43\xfc\xf9\xff\x0c\x19\x08\x4d\x13\x99\xf7\x4d\x59\x9e\x14\xf7\x53\x5b\x08\x3b\x94\x9f\x6d\x4b\x8e\x77\xc7\xaa\x2e\x03\xb3\x1e\xb5\x24\x2e\x1d\xbe\x96\x03\x7a\x26\x57\x46\xf9\xca\x3d\xea\x32\xc8\x44\xa9\xb4\x3f\x3b\x51\xd5\xe5\x52\xa4\x97\x10\xba\x68\x95\x41\x77\x19\x9d\x65\x9b\xd9\x89\xc7\x89\x13\x6f\xe1\x48\x31\xe9\xf9\xfc\xc9\x16\x06\x20\xb2\xd5\x11\xf2\xe4\x28\x42\xf1\x47\x7c\x25\xfc\x7a\xe4\xec\x07\x94\xcd\x18\x8d\x6d\xac\xc4\x15\x63\x73\x1d\x7e\xc4\xda\xbc\xb3\x7f\x99\x9c\xbe\x26\xc6\x73\x91\xd8\x99\x3c\xb9\xf0\x15\x23\xc3\x91\x28\x34\xd6\x5c\x06\x3b\xf9\x12\x8f\xf5\xa1\xc5\xfd\x7e\xdf\xe2\x63\x5d\x3f\xee\x91\x8e\x3b\x29\x8f\xf2\xfe\xfe\x41\xee\x1f\xab\x2a\xb2\xd7\xd6\xb2\x92\xb5\x40\x89\xfb\x07\xc2\xea\x70\xac\x8e\xd8\x3e\x88\x3d\xd5\xf5\xa3\x38\x3c\xb6\x6d\x5d\x8b\xc3\xdd\xfe\x2e\x6e\xd9\x29\x4d\x55\xc1\x6f\x9c\xc5\x76\x0a\x95\x5e\xbe\x76\x8b\xae\x9c\x1c\x8e\x7d\x94\x8f\x57\x0a\xba\xed\xc1\x91\xb7\x93\x13\x14\xce\x13\xad\x2f\x23\x72\xbf\x9e\xc5\xe1\xeb\x4f\x8e\x12\x6e\x1a\xa9\xae\x4b\x91\xe3\x1e\xbe\x6c\xcf\x5a\xbc\xa0\xa6\x37\x43\x5c\x4a\x1a\xb5\xbd\x14\xb1\xa6\x21\x35\x58\x76\xbe\xda\xa7\x29\x4b\xa9\x8b\x18\xaa\x68\xc9\x7d\x25\x4d\x97\xb3\x0a\xad\x58\x58\x77\xfa\x10\x2f\xa1\x96\x71\x51\xfe\x05\x9d\xe8\xd5\x39\x34\x01\x6a\x1f\xee\x30\xaa\x4b\x7a\xc7\x3d\x25\x21\x6c\xd1\x53\xa8\x4f\xfa\x28\x86\x07\xb6\x80\x06\x66\xcf\xeb\x8b\xc3\xd5\x0d\x22\x78\xae\x7c\x5c\x53\x96\x16\x62\x78\x49\xc6\x32\x85\xe7\x9f\x44\x09\x25\x89\x77\x2c\xbf\xb4\xe2\xf7\x15\x08\x7a\x34\x7f\x87\x97\x94\x90\xd9\xa9\x76\xe2\x24\x95\xf4\xc6\x0e\x61\xd6\x25\x58\x6d\x19\xc0\x57\x65\x64\x03\x4f\xcf\xcf\x73\xc6\xe1\x3d\xec\x94\xb4\xec\xdd\xe7\xe6\xe9\xf9\x79\x0b\x9f\xc3\x4f\x51\x14\xb7\x61\x70\xe6\xef\xd7\x4b\x18\x47\x4f\xdc\xc0\x3f\xc3\x24\xa6\x4b\xe3\xbc\xf6\x7e\xe7\xba\xfe\x04\x67\x00\x03\x1a\xd5\x91\xe7\x17\x9c\xb8\xb7\xae\x01\x6c\xe5\xa4\x65\xf6\x5b\x00\x00\x00\xff\xff\xf7\x46\x00\x5d\x81\x0a\x00\x00"

func bvlc_alexnetYmlBytes() ([]byte, error) {
	return bindataRead(
		_bvlc_alexnetYml,
		"bvlc_alexnet.yml",
	)
}

func bvlc_alexnetYml() (*asset, error) {
	bytes, err := bvlc_alexnetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bvlc_alexnet.yml", size: 2689, mode: os.FileMode(420), modTime: time.Unix(1502162752, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bvlc_googlenetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x0c\xe0\x4b\x0b\xc4\x52\x24\x7b\x13\x5b\x87\x1e\xea\x02\x8b\x05\x82\x1c\xb2\xc0\x5e\x8a\xc2\x18\x91\x23\x99\x0d\x45\x12\xe4\xc8\x8e\xfb\xeb\x0b\x52\xb2\xe5\x74\xb3\x5d\x1f\x0c\x8a\x7c\xf3\xc1\xf7\x66\x86\x06\x7b\xaa\xe1\xf7\x6f\x4f\xbb\xe5\x67\x6b\xbb\x27\x7a\x26\x86\x05\xc4\x6d\xb0\x2d\x9c\xed\xe0\xa1\xb7\x92\x74\xd6\x7a\xec\xe9\x64\xfd\x6b\x9d\x01\x8c\x66\x3b\x6c\x5b\x82\x05\x5c\x8f\xa0\xb5\x1e\xf8\x40\x93\x09\xc0\x91\x7c\x50\xd6\xd4\x50\xe6\xf7\xef\x80\xd3\x01\x08\x6b\xd8\xa3\x32\x9c\xfd\x07\x7a\x01\x28\xd3\x5a\xdf\x23\x8f\x6b\x08\xd4\xa3\x61\x25\xae\xe7\xe3\x69\x16\xfd\xa0\x32\xe4\x6b\x58\xc0\xf5\x23\xc0\x10\x48\x02\x5b\x70\xe4\x23\x72\x4c\x0c\x9c\x27\xa9\x44\xf4\x99\xc1\xfc\x5b\x40\x3f\x68\x56\x4e\x13\x38\x8d\x1c\xf1\x01\x04\x1a\x68\x08\x82\x23\xa1\x5a\x45\x32\x03\xc0\x5e\x3e\xac\xeb\x64\xd9\xb9\xa1\x06\x8f\xca\x79\xfb\x37\x09\x2e\x04\xfa\x5e\x2f\x45\xe4\xa5\x4e\xb0\xa5\x70\x43\x42\x8a\x9f\x22\xbb\x84\x74\x4e\x3c\xac\x35\xd5\x3f\x35\x9a\x80\x93\xd9\xff\xa7\x72\x8b\x95\x14\x84\x57\x8e\x13\xd7\xbf\x65\x00\xb3\xee\x49\x09\x92\x60\x0d\x7c\x79\xfa\xfa\xed\x65\x07\xd5\x7d\x59\xdd\x01\xea\xde\x06\x06\x7a\x43\xc1\xfa\x0c\x18\x60\x74\xd2\x90\x8c\x9a\x7c\xb6\xca\x74\xf0\x07\x91\x23\x0f\x27\xc5\x07\xd8\x59\x73\xb4\x7a\x88\x31\x02\x34\x67\xf8\xfa\x0f\x75\x24\xcf\x40\x0c\xa8\xf3\x68\x33\xfb\x5f\xe7\x99\xa7\x96\x3c\x19\x41\x21\xaa\x37\x7f\x25\xe1\xd0\x45\x1d\x0b\x38\x51\x13\x14\x53\x5c\x12\x8b\x3c\xbf\xe4\x10\x63\xdf\x96\xdc\x12\x0e\xcc\x2e\xd4\x45\x81\xfe\x4d\x1d\x73\xeb\xbb\xc2\xc9\xb6\x28\xd7\xf7\xdb\x7c\xbd\x59\x57\xb9\x93\x6d\xb6\x00\xad\x04\x99\x90\xaa\x7c\x36\x9f\x36\x6b\x18\x8c\xa7\xc0\x5e\x09\x26\x99\x2d\x40\x19\x37\x70\xca\x67\xc6\x8e\x7b\x51\xa8\x05\xb4\xca\x07\x1e\x51\xc0\x67\x47\xdf\x35\xc2\x32\x6d\xd7\xa0\x7a\xec\x28\x1b\xab\xed\x46\x89\x4b\x16\x37\x7e\x12\xe8\x9d\x58\x11\x30\x86\x98\xbd\x38\x8c\x2d\xc5\xe4\x13\x75\x29\xf4\xbc\x35\x15\xb7\x54\x3d\x99\xd8\x2c\xa1\x86\x3f\xcb\x3b\x58\xdd\x41\x55\xad\xd3\xdf\x5f\x13\xa4\x27\x34\xf5\x95\xb8\x4e\xf1\x61\x68\x72\x61\xfb\xe2\xc5\x36\xe4\xf9\x7e\x53\x56\x85\x24\x72\x01\xb5\x24\x2e\x3c\x9e\x8a\x1e\x03\x93\x2f\x52\x81\x2d\x03\xea\x42\x22\x63\xa1\x74\x38\x7a\x51\x56\x45\x4a\xd1\x10\xef\xa3\xeb\xbc\x51\x06\xfd\xd9\x79\xcb\x36\xb3\x03\xbb\x81\x47\xde\xe2\x95\x52\xd2\xd3\xfd\xc7\xb3\x0c\x26\xb6\x5a\x42\x1e\x3c\x25\x28\x7e\xc4\xd7\x88\x9f\xaf\x9c\x7d\x40\xd9\x84\xd1\xd8\x24\x25\x6e\x18\x9b\x74\xf8\x88\xb5\x29\x72\xd8\x0f\x5e\xdf\x12\x13\x38\x1f\xd9\x19\x02\xf9\x38\x67\xc8\x70\x22\x0a\x8d\x35\xe7\xde\x0e\xa1\xc0\x4d\xb5\x6e\x70\xb5\x5a\x35\xb8\xad\xaa\xed\x0a\x69\x73\x2f\xe5\x46\x3e\x3c\x3c\xca\xd5\xb6\x2c\x13\x7b\x4d\x25\x4b\x59\x09\x94\xb8\x7a\x24\x2c\xd7\x9b\x72\x83\xcd\xa3\x58\x51\x55\x6d\xc5\x7a\xdb\x34\x55\x25\xd6\x9f\x56\x9f\x52\xc8\x56\x69\x2a\x73\x7e\xe3\x2c\x95\x53\x54\xfa\x32\x8f\xc2\x34\xd1\x3a\x8f\xee\x00\x68\x24\x9c\x48\x75\x07\x0e\xe0\x29\xd8\xc1\x0b\x8a\xf7\x49\xa7\x7b\x87\x7c\x98\xef\xe2\xf1\xf4\x83\xab\xc4\xd7\x60\xd4\xf5\x22\x72\x8a\x11\x8a\xe6\xa8\xc5\xbe\xb3\xb6\xd3\x51\xd9\x42\x92\xd3\xf6\x9c\x27\x55\x63\x72\x70\x89\x7d\x13\xa9\x2e\x0a\xa9\xf3\xe4\x2c\x6f\xc8\xbf\x92\xa6\xf3\x51\xc5\x62\x4c\x8d\xf9\xde\xe3\x88\xbb\xb4\x8c\x0a\x7b\xf4\xe2\xa0\x8e\xb1\x10\x50\x87\xf8\xd2\xa8\x16\x02\xf1\x5d\xd4\xd5\x24\x71\x1b\x0c\x14\x35\x02\x15\x00\x21\x2e\xd8\x02\x1a\x98\x2c\x6f\xc7\xfb\xcd\x9c\x8f\x96\x33\x27\xb7\xb4\x8d\x1b\xc9\xbd\x24\x63\x99\xe2\xfa\x07\x5e\xa2\x2c\xe9\x25\x0c\x97\x72\xfc\x5e\x85\x38\x0e\xd5\x98\xea\x25\x25\x64\xf6\xaa\x19\x78\x9c\x76\xf4\xc6\x1e\xc1\x10\xa7\x67\x71\x3e\xcb\x00\x5e\x95\x91\x35\xec\x9e\x9f\xa7\x8c\xe3\x77\x8c\x64\x68\xf0\xa8\xaf\x36\xbf\xec\x9e\x9f\xef\xe0\x25\xfe\xe5\x79\xfe\x6b\x6c\x9e\x38\xc7\x95\xe9\xf6\xb1\x25\x03\x71\x0d\x5f\x62\x37\x8e\x4f\xfb\xb4\x77\x7d\x19\xd3\xa4\x9a\x0c\x32\x80\x1e\x8d\x6a\x29\xf0\x1e\x07\x3e\x58\x5f\x03\x36\x72\xd0\x32\xfb\x37\x00\x00\xff\xff\xf4\x54\xa4\xf6\x29\x08\x00\x00"

func bvlc_googlenetYmlBytes() ([]byte, error) {
	return bindataRead(
		_bvlc_googlenetYml,
		"bvlc_googlenet.yml",
	)
}

func bvlc_googlenetYml() (*asset, error) {
	bytes, err := bvlc_googlenetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bvlc_googlenet.yml", size: 2089, mode: os.FileMode(420), modTime: time.Unix(1502160208, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bvlc_reference_caffenetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x51\x6f\xdb\x38\x12\x7e\xd7\xaf\x18\xc0\x38\x20\xbd\x8b\x24\x4b\x76\x12\x47\x07\x1c\xee\x2e\xf7\xd2\xc3\x22\x0f\x45\x77\x5f\x16\x0b\x63\x44\x8e\x2c\xb6\x14\x29\x90\x23\xbb\xde\x5f\xbf\x20\x29\xd9\xce\xb6\xdd\xe6\xc1\x11\x39\xdf\x0c\x87\xdf\x0c\x3f\xd2\xe0\x40\x0d\xfc\xf7\x97\x9f\x5e\xf2\x0f\xd4\x91\x23\x23\x28\x7f\xc1\xae\xa3\x57\x62\x58\x41\xb0\x83\xed\xe0\x6c\x27\x07\x83\x95\xa4\xb3\xce\xe1\x40\x27\xeb\x3e\x37\x19\x40\xf2\x8f\x0e\xb0\x82\x8b\x09\x3a\xeb\x80\x7b\x9a\x5d\x00\x8e\xe4\xbc\xb2\xa6\x81\xaa\x58\xbf\x01\xce\x06\x10\xd6\xb0\x43\x65\x38\xfb\x13\x74\x01\x28\xd3\x59\x37\x20\xa7\x6f\xf0\x34\xa0\x61\x25\x2e\xf6\x64\xcd\x42\x1c\x54\x86\x5c\x03\x2b\xb8\x0c\x3c\x4c\x9e\x24\xb0\x85\x91\x5c\x40\xa6\xc4\x60\x74\x24\x95\x08\x31\x33\xb8\xfe\xad\x60\x98\x34\xab\x51\x13\x8c\x1a\x39\xe0\x3d\x08\x34\xd0\x12\xf8\x91\x84\xea\x14\xc9\x0c\x00\x07\xf9\xb8\x6d\xa2\xe7\x61\x9c\x1a\x70\xa8\x46\x67\x3f\x91\xe0\x52\xa0\x1b\x74\x2e\x02\x2f\x4d\x84\xe5\x62\x9c\x22\x52\xfc\x10\x79\x88\xc8\x71\x14\x8f\x5b\x4d\xcd\x0f\x9d\x66\xe0\xec\xf6\xd7\xa9\xdc\x62\x25\x79\xe1\xd4\xc8\x91\xeb\x7f\x65\x00\x1f\x7b\xe5\x67\x5e\x94\x8f\xd5\x73\xe4\x27\xcd\xa1\xfe\x9d\xd5\xda\x9e\x94\x39\xc4\xf9\x54\xef\xf7\x03\x1e\x62\x9b\x24\x9f\x58\xbe\x80\x50\xc6\xb3\x9b\x22\xab\xbe\x80\xf7\x1c\xa2\x21\x38\x1a\xb5\x12\xa9\x7e\xb6\xbb\x36\x07\xa4\x3c\x5a\x92\xa1\xac\x61\xfa\x3f\x9a\xbe\x84\xb0\xe3\xd4\x5e\x3c\x4e\x8a\x7b\xf0\x76\x20\x90\xaa\x9b\xfb\xd4\x17\xa1\x01\x2d\x5f\x57\x8e\xa8\x94\xb8\x56\x87\x9e\xc3\x9c\x44\xc6\x1c\xa7\xc3\x40\x86\x63\xac\x7f\x66\x10\x31\xd6\x49\x72\x21\x95\xd1\x5a\x1d\x90\x68\x24\x98\xd0\x45\x5a\xfd\x9e\x56\xd5\x78\x0e\xbd\xa3\x3c\xf8\x93\x62\xd1\x93\x84\x3b\x65\x60\x39\x1f\xf7\x17\x57\xe5\x41\x5a\x43\xd0\x52\x67\x1d\xbd\x8d\xf2\xae\xf8\x8a\x5b\x6f\x70\xf4\xbd\x8d\xcc\x2a\x26\x97\x56\xdb\x54\xeb\xfb\xf5\x7a\x5d\xc0\xc7\x3e\x44\xf2\x0c\x47\xd4\x4a\x26\xe3\xdc\xb7\x68\x04\x81\x9c\x5c\xac\xc4\x65\xdb\xe8\xdf\x84\xd9\x84\x30\x89\x8c\x9b\x08\x28\xc4\xe4\x50\x9c\xe1\xe1\xa9\xd8\x56\xf5\xdf\xe2\x7e\xb5\xf5\x1e\xaa\x62\x57\x6f\xea\x5d\x71\x9b\xa5\x6d\xc3\xc9\x09\x85\x63\x3b\xe6\xd5\x5b\xef\xe4\x9b\x4c\x0f\x57\xd3\x6e\x1d\x4c\x36\x55\xf1\x66\x65\x1f\xa8\x9a\x7c\x48\xf5\xd3\xe4\x39\x9a\x05\x19\x26\x07\xc2\xd9\xb1\x80\xbb\x9f\xfd\xd2\x5a\x78\x24\x87\x87\xa8\x39\xd5\x3a\x9a\xfd\x3d\xdc\x6d\xe1\x1f\x50\xcd\x3e\xef\xe0\xef\x50\xc3\xa0\x9c\xb3\xee\x1e\x7c\x6f\x27\x2d\xe7\x74\x01\xa1\x55\x0c\xbd\x3a\xf4\xe4\xae\x79\x79\x56\x5a\x17\xef\xde\x96\x21\x90\x16\x19\x24\x09\xed\x19\xfe\x4f\x5d\x07\xff\xb3\x06\xfb\x89\xe0\xdf\x9f\xa8\xeb\x64\x1a\x64\x6e\xd1\x45\x1f\x24\xe5\x3a\x8a\x6a\x82\x63\x68\x90\x12\x4e\xd4\x7a\xc5\x14\x3e\x89\x45\x51\x2c\x5d\xbd\x6c\x6b\xd1\xc1\x1c\x7a\xe6\xb1\x29\xcb\xe4\x59\x18\x35\xfa\x42\x88\x34\x2c\xb7\xbb\x7a\x9b\xab\x70\xac\x0c\x71\x2e\x34\x7a\xaf\xba\xf9\x08\xe4\xa1\x9e\xb9\x24\x1a\x73\x61\xcd\xd1\xea\x29\xcc\xa2\xce\x0d\x4d\x2e\xfe\xe3\x20\xa8\xbe\x18\x65\x97\xad\x40\x2b\x41\xc6\xd3\x9b\xa3\x96\xcd\x93\x0d\x4c\xc6\x91\x67\xa7\x04\x93\xcc\x56\xa0\xcc\x38\x71\xdc\xd0\x15\x9b\xe6\x82\xfc\xac\xa0\x53\xce\x73\x42\x01\x9f\x47\xfa\x4a\xde\xf3\x38\xdd\x40\xcc\x3d\x4b\x1a\x7a\xa3\x2f\x4b\x16\x37\x71\x22\xe8\x8d\x04\x05\x40\x5a\xe2\x1a\x65\xc4\x70\x51\x30\xb9\xc8\x7d\x5c\xfa\x3a\x35\x4b\xb6\x54\x03\x99\x70\x05\xf8\x06\x7e\xad\xee\x61\x73\x0f\x75\xfd\x14\x7f\x7e\x9b\x21\x03\xa1\x69\x22\xf3\xbe\x29\xcb\x83\xe2\x7e\x6a\x0b\x61\x87\xf2\x83\x6d\xc9\xf1\x7a\x57\xd5\x65\x60\xd6\xa3\x96\xc4\xa5\xc3\x53\x39\xa0\x67\x72\x65\x94\xcd\xdc\xa3\x2e\x83\x8e\x94\x4a\xfb\xa3\x13\x55\x5d\x2e\x45\xda\x87\xd0\x45\xab\x0c\xba\xf3\xe8\x2c\xdb\xcc\x4e\x3c\x4e\x9c\x78\x0b\x5b\x8a\x49\xcf\xfb\x4f\xb6\xa0\x3f\x91\xad\x8e\x90\x27\x47\x11\x8a\xdf\xe2\x2b\xe1\xaf\x5b\xce\xbe\x41\xd9\x8c\xd1\xd8\xc6\x4a\xdc\x30\x36\xd7\xe1\x5b\xac\xcd\x2b\xfb\xfd\xe4\xf4\x2d\x31\x9e\x8b\xc4\xce\xe4\xc9\x85\xdb\x93\x0c\x47\xa2\xd0\x58\x73\x1e\xec\xe4\x4b\xdc\xd5\xdb\x16\x37\x9b\x4d\x8b\xcf\x75\xfd\xbc\x41\xda\xad\xa5\xdc\xc9\xc7\xc7\x27\xb9\x79\xae\xaa\xc8\x5e\x5b\xcb\x4a\xd6\x02\x25\x6e\x9e\x08\xab\xed\xae\xda\x61\xfb\x24\x36\x54\xd7\xcf\x62\xfb\xdc\xb6\x75\x2d\xb6\x0f\x9b\x87\xb8\x64\xa7\x34\x55\x05\x7f\xe1\x2c\xb6\x53\xa8\xf4\x72\xcb\x2e\x87\xf5\xe0\x70\xec\xa3\xe8\x9c\x28\x08\xbb\x0f\x57\x93\x9d\x9c\xa0\xb0\x9f\x68\xdd\x8f\xc8\xfd\x75\x2f\x0e\x4f\xdf\xd9\x4a\x78\xec\xa4\xba\x2e\x45\x8e\x6b\xf8\xb2\x3d\x6a\xb1\xbf\x9c\xef\x7d\x84\x18\xe2\x52\xd2\xa8\xed\xb9\x88\xe5\x0d\x59\xc2\x92\xc4\xcd\x92\x4d\x59\x4a\x5d\x44\x97\xa2\x25\xf7\x99\x34\x9d\x8f\x2a\x74\x65\x61\xdd\xe1\x7b\xa1\x93\x43\x3a\x44\x19\x80\xf2\x7b\x74\xa2\x57\xc7\xd0\x1b\xa8\x7d\x78\x52\xa9\x2e\xc9\x27\xf7\x94\x74\xb5\x45\x4f\xa1\x6c\xe9\x56\x0d\x1f\x6c\x01\x0d\xcc\x9e\xb7\xef\x98\x9b\x07\x4d\xf0\xbc\xd2\x74\xcb\x64\x9a\x88\xe1\x25\x19\xcb\x14\xbe\xbf\x13\x25\x54\x2a\x3e\xf9\xfc\xd2\xa1\x5f\x17\x26\xc8\xd4\x7c\x91\x2f\x29\x21\xb3\x53\xed\xc4\x49\x41\xe9\x0b\x3b\x84\x59\xae\xe0\x6a\xcb\x00\x3e\x2b\x23\x1b\x78\x79\x7d\x9d\x33\x0e\xe3\xb0\x52\x92\xb8\x8b\xcf\xdd\xcb\xeb\xeb\x3d\x7c\x08\x3f\x45\x11\x75\x7d\xb9\x0a\xf7\xe1\x94\x7a\xe2\xe6\xfa\x38\x59\xc1\x3c\x77\x79\x02\x46\xf1\x9a\x1d\x32\x80\x01\x8d\xea\xc8\xf3\x1e\x27\xee\xad\x6b\x00\x5b\x39\x69\x99\xfd\x11\x00\x00\xff\xff\x51\x6e\x13\xd2\x1b\x0b\x00\x00"

func bvlc_reference_caffenetYmlBytes() ([]byte, error) {
	return bindataRead(
		_bvlc_reference_caffenetYml,
		"bvlc_reference_caffenet.yml",
	)
}

func bvlc_reference_caffenetYml() (*asset, error) {
	bytes, err := bvlc_reference_caffenetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bvlc_reference_caffenet.yml", size: 2843, mode: os.FileMode(420), modTime: time.Unix(1502159925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bvlc_reference_rcnn_ilsvrc13Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x56\x4d\xaf\xdb\x3a\x0e\xdd\xfb\x57\x10\xc8\x66\x06\xb8\xb1\xe3\x7c\xf4\xb6\x5e\x0c\x06\xbd\xc0\x0c\x0a\xf4\x65\x71\x5b\x74\xf3\xf0\x10\xd0\x12\x1d\xab\xd7\x96\x04\x8a\x4e\x6e\xfe\xfd\x83\x64\x3b\x49\x5f\xbf\xb2\x08\x64\xe9\x90\x22\x0f\x0f\x69\x5b\xec\xa9\x82\xf7\x5f\x3e\x3e\x2d\x9f\xa9\x21\x26\xab\x68\xf9\xfc\xb4\xdf\x2f\x3f\x7c\xfc\xf4\xe5\xf9\xa9\xdc\xc0\x02\x22\x08\x5c\x03\x17\x37\x30\xf4\x4e\x53\x97\x35\x8c\x3d\x9d\x1d\xbf\x54\x19\xc0\xe8\xe4\x09\x9b\x86\x60\x01\xd7\x23\x68\x1c\x83\xb4\x34\x99\x00\x9c\x88\x83\x71\xb6\x82\x32\x5f\x7d\x03\x9c\x0e\x40\x39\x2b\x8c\xc6\x4a\xf6\x0f\xe8\x0c\x30\xb6\x71\xdc\xa3\x8c\x6b\x08\xd4\xa3\x15\xa3\xae\xe7\xe3\x69\x16\xfd\xa0\xb1\xc4\x15\x2c\xe0\xfa\x10\x60\x08\xa4\x41\x1c\x78\xe2\x88\x1c\x03\x03\xcf\xa4\x8d\x8a\x3e\x33\xb8\xfd\x16\xd0\x0f\x9d\x18\xdf\x11\xf8\x0e\x25\xe2\x03\x28\xb4\x50\x13\x04\x4f\xca\x34\x86\x74\x06\x80\xbd\x7e\xb3\xad\x92\xe5\xd1\x0f\x15\x30\x1a\xcf\xee\x2b\x29\x29\x14\x72\xdf\x2d\x55\xe4\xa5\x4a\xb0\xa5\xf2\x43\x42\xaa\xdf\x22\x8f\x09\xe9\xbd\x7a\xb3\xed\xa8\xfa\xad\xd1\x04\x9c\xcc\x7e\x1d\xca\x3d\x56\x53\x50\x6c\xbc\x24\xae\xff\x93\x01\x7c\x6e\x09\xfc\xc0\x34\x95\xd3\xd8\x20\x91\xe2\x91\x72\xd7\xa4\x7a\x3e\x2f\x9f\xf6\xfb\x89\xbc\x58\xe3\xab\x54\x34\x09\x25\x22\x73\xf8\xdc\x9a\x30\x41\xce\x18\xa0\x47\x4d\x50\x5f\x40\x18\x6d\xf0\x5d\x74\x69\x8f\x77\xce\x3e\x7d\xf9\x03\x54\x87\x21\x44\x5a\x39\x80\xb1\xe2\x00\xa1\x51\x4b\x56\xd6\x5e\x8f\xd4\x18\x47\x87\x17\xe2\x07\xf0\xec\x4e\x46\x93\x86\x96\x98\x00\x03\x60\x0c\xb1\x59\x4a\x4b\xcb\xd0\x52\xd7\x4c\x49\x8c\x61\x39\xce\xe1\x33\x5f\xd2\xa5\xd7\x40\x81\x5e\xb1\x8f\x35\x16\x07\x81\x08\x8c\x44\x5d\xe1\x98\x44\x06\xb0\xcf\xdf\xe7\xf0\x3f\xc7\xc0\x14\x08\x59\xb5\x91\x1c\xef\x02\x85\x07\xe8\xf1\x85\xa2\xa4\x66\x5a\x5c\xd3\x18\x65\xb0\x9b\x52\xf2\xa8\x5e\xf0\x48\x80\x56\x83\x75\x02\x12\x19\x99\xae\xcb\x13\xd3\xdf\x30\x94\x84\x4f\x3a\x92\xf4\xec\x42\x80\xff\x1b\x0e\xad\x51\x2f\xf0\x5f\xae\x8f\xd3\x3a\xe3\xb9\x47\x43\x54\xf6\xed\x29\x89\x1a\x7d\x64\xae\x80\x33\xd5\xc1\x08\xc5\x25\x89\xca\x73\x18\x8b\x5c\xcf\x8c\xcf\xed\xb8\x84\x56\xc4\x87\xaa\x28\x90\x5f\xcd\x29\x77\x7c\x2c\xbc\x6e\x8a\x72\x53\x96\xf9\x7a\xb7\xde\xe6\x5e\x37\x57\x5c\x55\x14\xb6\x3e\x19\x3a\x13\xe7\x5f\x07\x7f\x11\xe2\x64\x71\x34\xd2\x0e\x75\x11\x47\x48\x91\xf4\x55\xd4\x9d\xab\x8b\x1e\x83\x10\x17\x53\xbe\xa1\xb8\x49\xc3\xf8\x8b\xad\xb3\x05\x74\x46\x91\xbd\xb1\x37\x46\x35\x6d\x56\x30\x58\xa6\x20\x6c\x94\x90\xce\x16\x60\xac\x1f\x24\xa5\x79\xc3\x8e\x7b\xb1\x37\x16\xd0\x18\x0e\x32\xa2\x40\x2e\x9e\xbe\x9b\x3d\xcb\xb4\x5d\x81\xe9\xf1\x48\xd9\xd8\xe0\x77\xe2\x9f\xa3\xb8\xf3\x93\x40\xdf\xf4\x47\x04\x8c\x57\xdc\xbc\x78\x8c\x53\x4c\x88\x53\x45\xd2\xd5\xb7\xad\x69\x9e\x68\xd3\x93\x8d\xf3\x29\x54\xf0\x67\xf9\x00\x9b\x07\x58\xaf\x1f\xd3\xdf\x5f\x99\x1b\xc4\x0f\x32\x66\x11\x2f\x48\x2e\x66\x45\xa5\xb3\x0c\xa6\xd8\x1b\x42\x19\x98\x12\x14\x7f\x14\xfd\x88\xbf\x05\x90\xfd\x20\x81\x09\xd3\x61\x9d\x78\xb9\x8b\x7f\x62\xe5\x47\x39\x4c\x37\x87\xc3\xc0\x5d\x75\x95\xcd\xd1\x04\xc9\xc7\xfa\x0f\x81\x38\x0e\x5a\xb2\x92\x2b\xd7\x17\x68\x9d\xbd\xf4\x6e\x08\x85\xde\x6d\xb6\x7a\xb3\xde\xee\x56\x5b\xa4\xd5\x7a\xd7\xa8\xc7\xed\xdb\xba\xc6\x1a\x1f\x69\x55\xee\xd6\x05\xe3\xb9\xd8\xd0\x06\xf5\xbb\x47\x6c\xb4\xda\xa9\x7a\xa3\x1f\x57\xf5\xbb\x55\xf9\x66\xb5\xd9\x6c\x55\x53\x6e\xde\xbe\xd5\xe5\xbb\x72\xb5\x2b\xa3\x8c\x0e\xe1\x62\x03\xc9\xe1\xec\x58\x87\x5c\x5e\x25\x4b\x35\x8e\xf4\xcf\x73\x79\xee\xab\x23\xa3\x6f\x53\x03\x9e\xc9\x1c\x5b\x09\xb1\x8d\xdd\xc0\x8a\x62\x5a\xe9\xf4\xe0\x51\xda\x5b\x4a\x8c\xe7\x9f\x64\x74\x27\xf0\x49\xdb\xe9\x8e\x50\xd4\xa7\x4e\x1d\xae\xad\x78\x88\xf3\xea\x60\xba\x70\x62\x55\x6e\x0a\x4d\xbe\x73\x97\xdc\xb3\x13\x17\x43\x85\x39\x92\xbb\x7b\xab\xa2\xd0\x5d\x9e\x5c\xe7\x35\xf1\x0b\x75\x74\x39\x99\xa8\x97\xd4\x60\xbf\xf2\x3f\x5a\xcd\x1a\x37\xe1\x10\x47\x94\x39\x45\xad\x60\x17\xe2\xdb\xd8\x34\x10\x48\x1e\x62\xe9\x6d\xaa\x7f\x8d\x81\x62\x19\xc1\x04\x40\x88\x8b\x38\x69\x2d\x4c\x96\xf7\xaf\xc0\xbb\x77\x61\xb4\xbc\xf1\x75\x4f\xe9\xb8\x91\xdc\x6b\xb2\x4e\x28\xae\x7f\xe2\xa5\x31\x1d\xa5\xaf\x85\x30\x2b\xf6\xfb\x0a\x9d\x8d\xb4\x66\x0c\x75\x0e\x09\x45\xd8\xd4\x83\x8c\x53\x8f\x5e\x85\x11\x2c\x49\xfa\x74\xb8\x9d\x65\x00\x2f\xc6\xea\x0a\xe2\xf0\x1d\x23\x8e\xcf\xf1\x26\x4b\x03\x63\x77\xb5\xf9\xd7\xd3\x7e\xff\x00\xcf\xf1\x2f\xcf\xf3\x7f\xc7\xfe\x8a\xc3\xd7\xd8\xe3\x41\xa3\x60\x20\xa9\xe0\x43\xec\xf0\x3d\x49\x1c\x13\xe3\xde\xf5\xeb\x21\x8d\x96\xc9\x20\x03\xe8\xd1\x9a\x86\x82\x1c\x70\x90\xd6\x71\x05\x58\xeb\xa1\xd3\xd9\xdf\x01\x00\x00\xff\xff\x99\x91\x8e\x29\x5b\x09\x00\x00"

func bvlc_reference_rcnn_ilsvrc13YmlBytes() ([]byte, error) {
	return bindataRead(
		_bvlc_reference_rcnn_ilsvrc13Yml,
		"bvlc_reference_rcnn_ilsvrc13.yml",
	)
}

func bvlc_reference_rcnn_ilsvrc13Yml() (*asset, error) {
	bytes, err := bvlc_reference_rcnn_ilsvrc13YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bvlc_reference_rcnn_ilsvrc13.yml", size: 2395, mode: os.FileMode(420), modTime: time.Unix(1502162770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bvlc_alexnet.yml": bvlc_alexnetYml,
	"bvlc_googlenet.yml": bvlc_googlenetYml,
	"bvlc_reference_caffenet.yml": bvlc_reference_caffenetYml,
	"bvlc_reference_rcnn_ilsvrc13.yml": bvlc_reference_rcnn_ilsvrc13Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bvlc_alexnet.yml": &bintree{bvlc_alexnetYml, map[string]*bintree{}},
	"bvlc_googlenet.yml": &bintree{bvlc_googlenetYml, map[string]*bintree{}},
	"bvlc_reference_caffenet.yml": &bintree{bvlc_reference_caffenetYml, map[string]*bintree{}},
	"bvlc_reference_rcnn_ilsvrc13.yml": &bintree{bvlc_reference_rcnn_ilsvrc13Yml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

